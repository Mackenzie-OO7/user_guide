# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 17:23+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/topics/yaml-guide.md:1
#: c28a6abcd8334321b7d1c84192b42caa
msgid "YAML Guide"
msgstr ""

#: ../../src/topics/yaml-guide.md:6
#: 3e16eeaccec8491dacfde122153d5bd0
msgid "[YAML][yaml] is a file format designed to be readable by both computers and humans. This guide introduces the features of YAML that are relevant when writing CWL descriptions and input parameter files."
msgstr ""

#: ../../src/topics/yaml-guide.md:13
#: 363eb3871f5d4c1288138dbd5f89be62
msgid "You can skip this section if you are already comfortable with YAML."
msgstr ""

#: ../../src/topics/yaml-guide.md:16
#: 31d7b17c34e0405b94f95e273bb22ac5
msgid "Contents"
msgstr ""

#: ../../src/topics/yaml-guide.md:18
#: 60197a7f2b7c40c48ede3d59626a09d8
msgid "[Key-Value Pairs](#key-value-pairs)"
msgstr ""

#: ../../src/topics/yaml-guide.md:19
#: 7b76a198bd154da99e38146a74ecec6c
msgid "[Comments](#comments)"
msgstr ""

#: ../../src/topics/yaml-guide.md:20
#: 024a6818d1b9492bb6e1f1c11d932953
msgid "[Maps](#maps)"
msgstr ""

#: ../../src/topics/yaml-guide.md:21
#: d0c550b003fa48c8b1b16888c7e9bc5f
msgid "[Arrays](#arrays)"
msgstr ""

#: ../../src/topics/yaml-guide.md:22
#: 7c2f8ceba9a141f097767ae8c3688aee
msgid "[JSON Style](#json-style)"
msgstr ""

#: ../../src/topics/yaml-guide.md:24
#: 5cfa92e1509e41cf9dec646d3a5dad86
msgid "Key-Value Pairs"
msgstr ""

#: ../../src/topics/yaml-guide.md:26
#: f76bccaee68c4eec96822d00013395a9
msgid "Fundamentally, a file written in YAML consists of a set of _key-value pairs_. Each pair is written as `key: value`, where whitespace after the `:` is required. Key names in CWL files should not contain whitespace - [_camelCase_][camelCase] is used for multi-word key names that have special meaning in the CWL specification and underscored key names otherwise. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:42
#: 5591f710f08a4e8c8d974224cdf018b5
msgid "The YAML above defines four keys - `first_name`, `last_name`, `age_years`, and `home` - with their four respective values. Values can be character strings, numeric (integer, floating point, or scientific representation), Boolean (`true` or `false`), or more complex nested types (see below)."
msgstr ""

#: ../../src/topics/yaml-guide.md:51
#: e383736713e243d487b883e669fb7065
msgid "Values may be wrapped in quotation marks, but be aware that this may change the way that they are interpreted i.e. `\"1234\"` will be treated as a character string , while `1234` will be treated as an integer. This distinction can be important, for example when describing parameters to a command: in CWL all parts of `baseCommand` must be strings so, if you want to specify a fixed numeric value to a command, make sure that you wrap that numeric value in quotes: `baseCommand: [echo, \"42\"]`."
msgstr ""

#: ../../src/topics/yaml-guide.md:61
#: c50eafc65e8b4b8a81318694098a42e5
msgid "Comments"
msgstr ""

#: ../../src/topics/yaml-guide.md:63
#: 3d8de32c3f3448e5beb19d395099e27d
msgid "You may use `#` to add comments to your CWL and parameter files. Any characters to the right of ` #` will be ignored by the program interpreting the YAML. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:76
#: 20edeb5c184f4df2ade328131365d751
msgid "If there is anything on the line before the comment, be sure to add at least one space before the `#`!"
msgstr ""

#: ../../src/topics/yaml-guide.md:79
#: 7f436640365249568802a846d4ad896b
msgid "Maps"
msgstr ""

#: ../../src/topics/yaml-guide.md:81
#: 7514de6b828f44b1b1d8683d8324a1da
msgid "When describing a tool or workflow with CWL, it is usually necessary to construct more complex, nested representations. Referred to as _maps_, these hierarchical structures are described in YAML by providing additional key-value pairs as the value of any key. These pairs (sometimes referred to as \"children\") are written on new lines under the key to which they belong (the \"parent\"), and should be indented with two spaces (â‡¥tab characters are not allowed). For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:104
#: 01288d81ae2e466d94bbee33751b3bd6
msgid "The YAML above illustrates how to build up complex nested object descriptions relatively quickly. The `inputs` map contains a single key, `example_flag`, which itself contains two keys, `type` and `inputBinding`, while one of these children, `inputBinding`, contains a further two key-value pairs (`position` and `prefix`). See the [Arrays](#arrays) section below for more information about providing multiple values/key-value pairs for a single key. For comparison with the example YAML above, here is a graphical representation of the `inputs` object it describes."
msgstr ""

#: ../../src/topics/yaml-guide.md:127
#: 3e6ba9083cdd4ed586110f76cd071896
msgid "Arrays"
msgstr ""

#: ../../src/topics/yaml-guide.md:129
#: 2c23b44142ba4969bd30c33c97142aed
msgid "In certain circumstances, it is necessary to provide multiple values or objects for a single key. As we've already seen in the [Maps](#maps) section above, more than one key-value pair can be mapped to a single key. However, it is also possible to define multiple values for a key without having to provide a unique key for each value. We can achieve this with an _array_, where each value is defined on its own line and preceded by `-`. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:146
#: 5956220b3839466aa491e84d2d0a5757
msgid "and a more complex example combining maps and arrays:"
msgstr ""

#: ../../src/topics/yaml-guide.md:167
#: 0ff275ae871b49449ec789b1bdc814c6
msgid "JSON Style"
msgstr ""

#: ../../src/topics/yaml-guide.md:169
#: f5215b7de4994cc5890886ac2914be23
msgid "YAML is based on [JavaScript Object Notation (JSON)][json]. Maps and arrays can also be defined in YAML using the native JSON syntax. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:177
#: 48dec799be364824a5dcbf5329f1f0ce
msgid "and:"
msgstr ""

#: ../../src/topics/yaml-guide.md:184
#: b4d3a3a2823147c9aa7a37ad2fe5ce06
msgid "Native JSON can be useful in indicating where a field is intentionally left empty (such as `[]` for an empty array), as well as where it makes more sense for the values to be located on the same line (For example, when providing option flags and their values in a shell command). However, as the second example above shows, it can severely affect the readability of a YAML file, and should be used sparingly."
msgstr ""

#: ../../src/topics/yaml-guide.md:194
#: 6998b8bd38a944f19c9ca758b14babe8
msgid "Reference"
msgstr ""

#: ../../src/topics/yaml-guide.md:196
#: bcc40a813d344c0abd960add8685e132
msgid "The [Learn YAML in Y Minutes][yaml-y-mins] reference was very helpful for us while we wrote this guide, though it also covers features that are not valid in CWL."
msgstr ""
