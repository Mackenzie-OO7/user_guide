# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 17:23+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/topics/inputs.md:1
#: 9a97be0420e54706a7c73bc1eb856b96
msgid "Inputs"
msgstr ""

#: ../../src/topics/inputs.md:3
#: d4b396558d594c84b82369a138358fd6
msgid "Essential Input Parameters"
msgstr ""

#: ../../src/topics/inputs.md:5
#: a3966840a8844e1999e21bcecc96a6f7
msgid "The `inputs` of a tool is a list of input parameters that control how to run the tool.  Each parameter has an `id` for the name of parameter, and `type` describing what types of values are valid for that parameter."
msgstr ""

#: ../../src/topics/inputs.md:9
#: ebeb58f7ebd541f581415a43d790811c
msgid "Available primitive types are *string*, *int*, *long*, *float*, *double*, and *null*; complex types are *array* and *record*; in addition there are special types *File*, *Directory* and *Any*."
msgstr ""

#: ../../src/topics/inputs.md:13
#: 95cf3ab046b44241ba399c56d4b0c6eb
msgid "The following example demonstrates some input parameters with different types and appearing on the command line in different ways."
msgstr ""

#: ../../src/topics/inputs.md:16
#: 6e6066facc2141739cac77bf9792572a
msgid "First, create a file called `inp.cwl`, containing the following:"
msgstr ""

#: ../../src/topics/inputs.md:18
#: e257868f6c6646e6a0d1feef62de079d
msgid "`inp.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:24
#: 2f2885adf6214b9a8f770097bb02b1e5
msgid "Create a file called `inp-job.yml`:"
msgstr ""

#: ../../src/topics/inputs.md:26
#: 01ec3e60c2f24f9c912d44d3d5dac4c5
msgid "`inp-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:33
#: 8c803c9f11414a9f9b92643923a79c65
msgid "You can use `cwltool` to create a template input object. That saves you from having to type all the input parameters in a input object file:"
msgstr ""

#: ../../src/topics/inputs.md:40
#: df2b1f41e3e149309ae8b19aaf6034ca
msgid "You can redirect the output to a file, i.e. `cwltool --make-template inp.cwl > inp-job.yml`, and then modify the default values with your desired input values."
msgstr ""

#: ../../src/topics/inputs.md:44
#: df5bd15a6b084bce879270be669f2923
msgid "Notice that \"example_file\", as a `File` type, must be provided as an object with the fields `class: File` and `path`."
msgstr ""

#: ../../src/topics/inputs.md:47
#: e73d20dd91574bcbb7b24932d9ff04e4
msgid "Next, create a whale.txt using [touch] by typing `touch whale.txt` on the command line."
msgstr ""

#: ../../src/topics/inputs.md:53
#: 56461c62effc487c9e73d1e82ddd3390
msgid "Now invoke `cwltool` with the tool description and the input object on the command line, using the command `cwltool inp.cwl inp-job.yml`. The following boxed text describes these two commands and the expected output from the command line:"
msgstr ""

#: ../../src/topics/inputs.md:64
#: df42caf04d5f48baa8e5734d6100cdf4
msgid "The CWL reference runner (cwltool) and other runners create temporary directories with symbolic (\"soft\") links to your input files to ensure that the tools aren't accidentally accessing files that were not explicitly specified"
msgstr ""

#: ../../src/topics/inputs.md:70
#: f8db1efc2092415387e4e16dc24775dd
msgid "The field `inputBinding` is optional and indicates whether and how the input parameter should appear on the tool's command line.  If `inputBinding` is missing, the parameter does not appear on the command line.  Let's look at each example in detail."
msgstr ""

#: ../../src/topics/inputs.md:83
#: 859f5479b2cd4e919e3ba19a3f084b01
msgid "Boolean types are treated as a flag.  If the input parameter \"example_flag\" is \"true\", then `prefix` will be added to the command line.  If false, no flag is added."
msgstr ""

#: ../../src/topics/inputs.md:95
#: d04258dca228411ab16f82585ee53985
msgid "String types appear on the command line as literal values.  The `prefix` is optional, if provided, it appears as a separate argument on the command line before the parameter .  In the example above, this is rendered as `--example-string hello`."
msgstr ""

#: ../../src/topics/inputs.md:109
#: 760c0af7e36d48d1b1681928ad195eaa
msgid "Integer (and floating point) types appear on the command line with decimal text representation.  When the option `separate` is false (the default value is true), the prefix and value are combined into a single argument.  In the example above, this is rendered as `-i42`."
msgstr ""

#: ../../src/topics/inputs.md:124
#: 4e5d3fb805f04593b34d5ae88dd6fa83
msgid "File types appear on the command line as the path to the file.  When the parameter type ends with a question mark `?` it indicates that the parameter is optional.  In the example above, this is rendered as `--file=/tmp/random/path/whale.txt`.  However, if the \"example_file\" parameter were not provided in the input, nothing would appear on the command line."
msgstr ""

#: ../../src/topics/inputs.md:131
#: 7b97d452561c4c158a835fd308feafb8
msgid "Input files are read-only.  If you wish to update an input file, you must [first copy it to the output directory](staging-input-files.md)."
msgstr ""

#: ../../src/topics/inputs.md:134
#: c63782e8b8524857a1683578534f8382
msgid "The value of `position` is used to determine where parameter should appear on the command line.  Positions are relative to one another, not absolute.  As a result, positions do not have to be sequential, three parameters with positions 1, 3, 5 will result in the same command line as 1, 2, 3.  More than one parameter can have the same position (ties are broken using the parameter name), and the position field itself is optional.  The default position is 0."
msgstr ""

#: ../../src/topics/inputs.md:142
#: fe66dc3c9aa743e0a2060a8280e6a59d
msgid "The `baseCommand` field will always appear in the final command line before the parameters."
msgstr ""

#: ../../src/topics/inputs.md:146
#: 04993bbb8c7b488d8b1b2517f4333f8d
msgid "Array Inputs"
msgstr ""

#: ../../src/topics/inputs.md:148
#: e33e6fd2e8a8472e88c9333c7b44fc2c
msgid "It is easy to add arrays of input parameters represented to the command line. There are two ways to specify an array parameter. First is to provide `type` field with `type: array` and `items` defining the valid data types that may appear in the array. Alternatively, brackets `[]` may be added after the type name to indicate that input parameter is array of that type."
msgstr ""

#: ../../src/topics/inputs.md:154
#: adc2cd5bd81b459b996ff65de5d25436
msgid "`array-inputs.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:160
#: 67da943c4d6d49cab1931606fb6938d9
msgid "`array-inputs-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:166
#: 0be87de7fd5e41da895dfc9369da7b5a
msgid "Now invoke `cwltool` providing the tool description and the input object on the command line:"
msgstr ""

#: ../../src/topics/inputs.md:178
#: 535a8e26cc3b4e3db43680f030d57879
msgid "The `inputBinding` can appear either on the outer array parameter definition or the inner array element definition, and these produce different behavior when constructing the command line, as shown above. In addition, the `itemSeparator` field, if provided, specifies that array values should be concatenated into a single argument separated by the item separator string."
msgstr ""

#: ../../src/topics/inputs.md:185
#: 61c26186c1734233bb7d9e5cd3056506
msgid "Note that the arrays of inputs are specified inside square brackets `[]` in `array-inputs-job.yml`. Arrays can also be expressed over multiple lines, where array values that are not defined with an associated key are marked by a leading `-`. This will be demonstrated in the next lesson and is discussed in more detail in the [YAML Guide](yaml-guide.md#arrays). You can specify arrays of arrays, arrays of records, and other complex types."
msgstr ""

#: ../../src/topics/inputs.md:191
#: 66ec7048099f4720989c8de5be49ea2a
msgid "Inclusive and Exclusive Inputs"
msgstr ""

#: ../../src/topics/inputs.md:193
#: efa9d841028c4135a513f3226b37bdfc
msgid "Sometimes an underlying tool has several arguments that must be provided together (they are dependent) or several arguments that cannot be provided together (they are exclusive).  You can use records and type unions to group parameters together to describe these two conditions."
msgstr ""

#: ../../src/topics/inputs.md:198
#: b3543061283e4bf286ed9fb7127238df
msgid "`record.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:204
#: afeff005e15d49edbd8222e95b4d6388
msgid "`record-job1.yml`"
msgstr ""

#: ../../src/topics/inputs.md:215
#: 0eb5e94bf86a4c84bb112d612c290bce
msgid "In the first example, you can't provide `itemA` without also providing `itemB`."
msgstr ""

#: ../../src/topics/inputs.md:217
#: 3d1f591442f54f9fa8effb98f4cc4f7f
msgid "`record-job2.yml`"
msgstr ""

#: ../../src/topics/inputs.md:233
#: 1a8735c689ff4e13bd207eed62d0bc1b
msgid "In the second example, `itemC` and `itemD` are exclusive, so only the first matching item (`itemC`) is added to the command line and remaining item (`itemD`) is ignored."
msgstr ""

#: ../../src/topics/inputs.md:236
#: f802a2e638764c95bef8889b958f6872
msgid "`record-job3.yml`"
msgstr ""

#: ../../src/topics/inputs.md:252
#: 54ffe9e897ff4682aa9d17e9239a5b40
msgid "In the third example, only `itemD` is provided, so it appears on the command line."
msgstr ""

#: ../../src/topics/inputs.md:255
#: 892a899a9365419c8cdc95e9f05f9e3d
msgid "Exclusive Input Parameters with Expressions"
msgstr ""

#: ../../src/topics/inputs.md:257
#: 2cca4db8543145c0a59da034c82db1fd
msgid "If you use exclusive input parameters combined with expressions, you need to be aware that the `inputs` JavaScript object will contain one of the exclusive input values. This means that you might need to use an **or** boolean operator to check which values are present."
msgstr ""

#: ../../src/topics/inputs.md:262
#: 1f42c1eba9f44397942d6bf2dd37855f
msgid "Let's use an example that contains an exclusive `file_format` input parameter that accepts `null` (i.e. no value provided), or any value from an enum."
msgstr ""

#: ../../src/topics/inputs.md:265
#: 1c0caf1fd3a4411f83dfc4866edeecfe
msgid "`exclusive-parameter-expressions.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:271
#: d0a92fe266614a5db77f32b0fc40ee83
msgid "Note how the JavaScript expression uses the value of the exclusive input parameter without taking into consideration a `null` value. If you provide a valid value, such as “fasta” (one of the values of the enum), your command should execute successfully:"
msgstr ""

#: ../../src/topics/inputs.md:280
#: e3a608fbb7e14213831c564128421cc2
msgid "However, if you do not provide any input value, then `file_format` will be evaluated to a `null` value, which does not match the expected type for the output field (a `string`), resulting in failure when running your workflow."
msgstr ""

#: ../../src/topics/inputs.md:289
#: a24cd12cc01b4e23b0ed878a27fcaa46
msgid "To correct it, you must remember to use an or operator in your JavaScript expression when using exclusive parameters, or any parameter that allows `null`. For example, the expression could be changed to `$(inputs.file_format || 'auto')`, to have a default value if none was provided in the command line or job input file."
msgstr ""
