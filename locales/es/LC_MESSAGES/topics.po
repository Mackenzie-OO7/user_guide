# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow
# Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 19:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../src/topics/additional-arguments-and-parameters.md:1
#: be1d17fdb27345ffb7fe0cbe92002434
msgid "Additional Arguments and Parameters"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:3
#: 82ff1f5ebb0647e886d131f7a8c4f5c3
msgid ""
"Sometimes tools require additional command line options that don't "
"correspond exactly to input parameters."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:6
#: 4dbbc91d876746b59f53d3ba49df43f8
msgid ""
"In this example, we will wrap the Java compiler to compile a java source "
"file to a class file.  By default, \"javac\" will create the class files "
"in the same directory as the source file.  However, CWL input files (and "
"the directories in which they appear) may be read-only, so we need to "
"instruct \"javac\" to write the class file to the designated output "
"directory instead."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:13
#: 82f4844017ec4f609c8f0f5bf9812f75
msgid "`arguments.cwl`"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:19
#: ../../src/topics/staging-input-files.md:15 afb24d50c0a94693ab9ef9271068e58d
#: ca7a2bce1de34dd2ad8f77095854037b
msgid "`arguments-job.yml`"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:24
#: 23f9dcf2c7344a40aa2d512f1349135a
msgid "Next, create a sample Java file to use with the command-line tool."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:30
#: 3d26cfb6a1204ba89ac812bc4fe3df4f
msgid ""
"And now invoke `cwltool` providing the tool description and the input "
"object on the command line:"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:36
#: 317f82f2a0d54af29baaf5e3fca1558e
msgid ""
"Here we use the `arguments` field to add an additional argument to the "
"command line that isn't tied to a specific input parameter."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:43
#: c5f85db684c842a5a2d55afb8ea44e94
msgid ""
"This example references a runtime parameter.  Runtime parameters provide "
"information about the hardware or software environment when the tool is "
"actually executed.  The `$(runtime.outdir)` parameter is the path to the "
"designated output directory.  Other parameters include "
"`$(runtime.tmpdir)`, `$(runtime.ram)`, `$(runtime.cores)`, "
"`$(runtime.outdirSize)`, and `$(runtime.tmpdirSize)`.  See the [Runtime "
"Environment][runtime] section of the CWL specification for details."
msgstr ""

#: ../../src/topics/best-practices.md:1 92154668e72240e48268a3dc593f65c5
msgid "Best Practices"
msgstr ""

#: ../../src/topics/best-practices.md:3 df0c80b10cde412c901b9bfa235b4521
msgid ""
"The following are a set of recommended good practices to keep in mind "
"when writing a Common Workflow Language description for a tool or "
"workflow. These guidelines are presented for consideration on a scale of "
"usefulness: although more is better, not all are required."
msgstr ""

#: ../../src/topics/best-practices.md:8 93e66f6c1c9643a3944ad3c7651464a1
msgid ""
"No `type: string` parameters for names of input or reference "
"files/directories; use `type: File` or `type: Directory` as appropriate."
msgstr ""

#: ../../src/topics/best-practices.md:11 7b54e111b9a2485d912b9c1dde0e6816
msgid ""
"A CWL document (in conjunction with any external components like "
"`Dockerfile`s) is software code. Workflow developers should be aware that"
" the usual rules of software licensing apply to this document. For "
"example, if the workflow is shared publicly, licensing terms must be "
"clear so that a future user understands under what conditions they can "
"run the workflow, modify it and/or combine it with other workflows. For "
"this reason, please consider including a license field in the document. "
"The authors of this guide urge you to choose a pre-existing license "
"rather than trying to write your own (see the link below to learn more "
"about choosing a license), and our recommended practice is to choose a "
"license that allows for re-use by anyone, e.g. [Apache 2.0][apache-"
"license]."
msgstr ""

#: ../../src/topics/best-practices.md:20 c58100a01b034441b247e761df1f6a12
msgid ""
"If possible, the license should be specified with its corresponding [SPDX"
" identifier][spdx]. Construct the metadata field for the license by "
"providing a URL of the form `https://spdx.org/licenses/[SPDX-ID]` where "
"`SPDX-ID` is taken from the list of identifiers linked above. See the "
"example snippet below for guidance. For non-standard licenses without an "
"SPDX identifier, provide a URL to the license."
msgstr ""

#: ../../src/topics/best-practices.md:26 53c3357a75df4704a96848aebc093327
msgid ""
"Useful reading: \"[A Quick Guide to Software Licensing for the Scientist-"
"Programmer][sci-license]\""
msgstr ""

#: ../../src/topics/best-practices.md:28 a9ae73ef4d3447038d1180032b41255c
msgid "_Example of metadata field for license with SPDX identifier:_"
msgstr ""

#: ../../src/topics/best-practices.md:37 a2a654e113d64f37bb3bfcb8828301ce
msgid ""
"For more examples of providing metadata within CWL descriptions, see  "
"[the Metadata and Authorship section of this User Guide](../topics"
"/metadata-and-authorship.md)."
msgstr ""

#: ../../src/topics/best-practices.md:40 66ad30cdce23481d90042b63c3bf8d16
msgid ""
"Include [attribution information][license-example] for the author(s) of "
"the CWL tool or workflow description. Use unambiguous identifiers like "
"[ORCID][orcid]."
msgstr ""

#: ../../src/topics/best-practices.md:44 f3c0be3d1a3249288a8cd3053bc1cdcf
msgid ""
"In tool descriptions, list dependencies using short name(s) under "
"`SoftwareRequirement`."
msgstr ""

#: ../../src/topics/best-practices.md:47 07ad1cf2508d4cb780a6e703c07d5a5b
msgid ""
"Include [SciCrunch][scicrunch] identifiers for dependencies in "
"`https://identifiers.org/rrid/RRID:SCR_NNNNNN` format."
msgstr ""

#: ../../src/topics/best-practices.md:50 f0931e33e50a495aabd1c58daca72c3e
msgid ""
"All `input` and `output` identifiers should reflect their conceptual "
"identity. Use informative names like `unaligned_sequences`, "
"`reference_genome`, `phylogeny`, or `aligned_sequences` instead of  "
"`foo_input`, `foo_file`, `result`, `input`, `output`, and so forth."
msgstr ""

#: ../../src/topics/best-practices.md:55 3da4c1e61c53469e8e313553130a5b28
msgid ""
"In tool descriptions, include a list of version(s) of the tool that are "
"known to work with this description under `SoftwareRequirement`."
msgstr ""

#: ../../src/topics/best-practices.md:58 8d3930c2039347beb1383b0dab7ea1d5
msgid ""
"`format` should be specified for all input and output `File`s. "
"Bioinformatics tools should use format identifiers from [EDAM][edam-"
"example]. See also `iana:text/plain`, `iana:text/tab-separated-values` "
"with `$namespaces: { iana: \"https://www.iana.org/assignments/media-"
"types/\" }`. [Full IANA media type list][iana-types] (also known as MIME "
"types). For non-bioinformatics tools, use or build an appropriate "
"ontology/controlled vocabulary in the same way. Please edit this page to "
"let us know about it."
msgstr ""

#: ../../src/topics/best-practices.md:66 275a541a634345d2b88a7e982d3a84cb
msgid ""
"Mark all input and output `File`s that are read from or written to in a "
"streaming compatible way (only once, no random-access), as `streamable: "
"true`."
msgstr ""

#: ../../src/topics/best-practices.md:69 23e3e58d1b5245919d1be053b0c53ddc
msgid ""
"Each `CommandLineTool` description should focus on a single operation "
"only, even if the (sub)command is capable of more. Don't overcomplicate "
"your tool descriptions with options that you don't need or use."
msgstr ""

#: ../../src/topics/best-practices.md:73 0a7b19343ab34220a615f9d5735f62f3
msgid ""
"Custom types should be defined with one external YAML per type definition"
" for re-use."
msgstr ""

#: ../../src/topics/best-practices.md:76 fbb538cc258a445a938333315248a4f8
msgid "Include a top-level short `label` summarising the tool/workflow."
msgstr ""

#: ../../src/topics/best-practices.md:78 dee070dbc0c54210a3b276dcd1e3b151
msgid ""
"If useful, include a top-level `doc` as well. This should provide a "
"longer, more detailed description than was provided in the top-level "
"`label` (see above)."
msgstr ""

#: ../../src/topics/best-practices.md:82 0d5c1c5e50de42809afdf4bcddeb86e0
msgid ""
"Use `type: enum` instead of `type: string` for elements with a fixed list"
" of valid values."
msgstr ""

#: ../../src/topics/best-practices.md:85 63a5664bb6f043529e753fa27faa9104
msgid ""
"Evaluate all use of JavaScript for possible elimination or replacement. "
"One common example: manipulating `File` names and paths? Consider whether"
" one of the [built in `File` properties][file-prop] like `basename`, "
"`nameroot`, `nameext`, etc., could be used instead."
msgstr ""

#: ../../src/topics/best-practices.md:90 e3832fa90bc540dd9c92dc606c8a3d1f
msgid ""
"Give the tool description to a colleague (preferably at a different "
"institution) to test and provide feedback."
msgstr ""

#: ../../src/topics/best-practices.md:93 8a2e36ed7ae0486b9a569b8a7c336fe9
msgid ""
"Complex workflows with individual components which can be abstracted "
"should utilise the [`SubworkflowFeatureRequirement`][subworkflow] to make"
" their workflow modular and allow sections of them to be easily reused."
msgstr ""

#: ../../src/topics/best-practices.md:97 00dd50adbb734f0ab7e08d005cf30487
msgid ""
"Software containers should be made to be conformant to the "
"[\"Recommendations for the packaging and containerizing of bioinformatics"
" software\"][containers] (also useful to other disciplines)."
msgstr ""

#: ../../src/topics/command-line-tool.md:1 eb2ea54b83304757ba4b835d4ae45642
msgid "Command Line Tool"
msgstr ""

#: ../../src/topics/command-line-tool.md:3 ad6f136a690e4c4d9320cbff4b1a3469
msgid ""
"A command-line tool is a type of Process object that can be run by itself"
" or as a Workflow step. It is a wrapper for a command like `ls`, `echo`, "
"`tar`, etc. The command-line tool is defined in the `baseCommand` "
"attribute of the command-line tool CWL document."
msgstr ""

#: ../../src/topics/command-line-tool.md:8 3018247f156c470ca7b9c7801a6f59bd
msgid ""
"A CWL command-line tool must also have `inputs` and `outputs`. The "
"following example contains a minimal example of a CWL command-line tool "
"for the `echo` Linux command, using inputs and outputs."
msgstr ""

#: ../../src/topics/command-line-tool.md:19 7c07c9401a3d424089828def1d272842
msgid "CWL command-line tool."
msgstr ""

#: ../../src/topics/command-line-tool.md:50 d5300fa60ee942cc961594a504b0d08d
msgid "`echo.cwl`"
msgstr ""

#: ../../src/topics/command-line-tool.md:57 f56c8f69d71f4f4da40fbb007008500e
msgid ""
"The example above uses a simplified form to define inputs and outputs. "
"You will learn more about in the [Inputs](../topics/inputs.md) and in the"
" [Outputs](../topics/outputs.md) sections."
msgstr ""

#: ../../src/topics/command-line-tool.md:68 4621ef6fe81a4048944814aff22f508f
msgid "Network Access"
msgstr ""

#: ../../src/topics/command-line-tool.md:69 1d3f1abb81ff4186843df880dc732ee2
msgid ""
"This indicates whether a process requires outgoing IPv4/IPv6 network "
"access. If a command-line tool is written manually in CWL v1.1+, there is"
" a need to  specify when network access is required."
msgstr ""

#: ../../src/topics/command-line-tool.md:83 93f0719b3b2c4c5297bf925801c93b45
msgid ""
"CWL v1.0 command-line tools that are upgraded to v1.1  or v1.2 get "
"Network Access automatically."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:1
#: 46b4df81014846aea9e0fe7c5caade0d
msgid "Creating Files at Runtime"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:3
#: 722ed10f0fed4ff59852fa09c45a92f1
msgid ""
"Sometimes you need to create a file on the fly from input parameters, "
"such as tools that expect to read their input configuration from a file "
"rather than the command line parameters, or need a small wrapper shell "
"script."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:7
#: 20b151c8c270433ab74288011f2ad47d
msgid "To generate such files, we can use the `InitialWorkDirRequirement`."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:9
#: 0625cac27fdc4127b50bd7f195117189
msgid "`createfile.cwl`"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:15
#: 2035501f61434c339a5abdf693696c84
msgid ""
"Any [expressions](../topics/expressions.md) like `$(inputs.message)` are "
"expanded by the CWL engine before creating the file. Here, insert the "
"value at the input `message`."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:20
#: f6e00a5502ef4bb386ee5f88b0085527
msgid ""
"The _CWL expressions_ are independent of any _shell variables_ used later"
" during command line tool invocation. That means that any genuine need "
"for the character `$` must be **escaped** with `\\`. For instance, "
"`\\${PREFIX}` above is expanded to `${PREFIX}` in the generated file to "
"be evaluated by the shell script instead of the CWL engine."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:27
#: 4fbbc941c4f7412b936446fbf9115363
msgid ""
"To test the above CWL tool, use this job to provide the input value "
"`message`:"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:29
#: ../../src/topics/environment-variables.md:13 ../../src/topics/outputs.md:77
#: 9f546d2c6a454542a860ead319642479 e6c179499aee4824a5c02babbf26a869
#: eb2052144d844cdaa0e9e4b3bc487628
msgid "`echo-job.yml`"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:35
#: d9ea213b07e64d04b53cdb32a3650322
msgid ""
"Before we run this, let us look at each step in a little more detail. The"
" base command `baseCommand: [\"sh\", \"example.sh\"]` will execute the "
"command `sh example.sh`. This will run the file we create in the shell."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:40
#: fcc7a6d59f8a4e13bf821d488fa17db7
msgid ""
"`InitialWorkDirRequirement` requires a `listing`. As the `listing` is a "
"YAML array, we need a `-` on the first line of each element of the array,"
" in this case we have just one element. `entryname:` can have any value, "
"but it must match what was specified in the `baseCommand`. The final part"
" is `entry:`, this is followed by `|-` which is YAML quoting syntax, and "
"means that you are using a multiline string (without it, we would need to"
" write the whole script on one line)."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:51
#: f7c967a182734c8ca47f873a0cb28093
msgid ""
"See the [YAML Guide](../topics/yaml-guide.md#maps) for more about the "
"formatting."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:54
#: ../../src/topics/environment-variables.md:18
#: ../../src/topics/file-formats.md:52
#: ../../src/topics/staging-input-files.md:20 ../../src/topics/workflows.md:198
#: 20f1807303474b5c8c18cede5df322a3 2c41b94f3196446ea483c630af9eea67
#: 5735865bd655415a9a136f441eebafaf 7364d5ebf81e4949b3212b06788e2381
#: f1195863b1b345f9a718776763466533
msgid ""
"Now invoke `cwltool` with the tool description and the input object on "
"the command line:"
msgstr ""

#: ../../src/topics/custom-types.md:1 d2e58b004bfb4c6cae7c69658de21321
msgid "Custom Types"
msgstr ""

#: ../../src/topics/custom-types.md:3 484ff45699964c2996a0cdfea0fdb329
msgid ""
"Sometimes you may want to write your own custom types for use and reuse "
"in CWL descriptions. Use of such custom types can reduce redundancy "
"between multiple descriptions that all use the same type, and also allow "
"for additional customisation/configuration of a tool/analysis without the"
" need to fiddle with the CWL description directly."
msgstr ""

#: ../../src/topics/custom-types.md:9 c30f12911bb649c6b71e7ad73edd0b4c
msgid ""
"The example below is a CWL description of the [biom convert format][biom]"
" tool for converting a standard biom table file to hdf5 format."
msgstr ""

#: ../../src/topics/custom-types.md:12 c8ecf2ef21fa4b8ba562625355ba8a65
msgid "`custom-types.cwl`"
msgstr ""

#: ../../src/topics/custom-types.md:18 3f328356740644a582ca21d5fa60b2f6
msgid "`custom-types.yml`"
msgstr ""

#: ../../src/topics/custom-types.md:24 b9569867a46745268f37ff47c18079fb
msgid ""
"___Note:___ To follow the example below, you need to [download the "
"example input file](https://github.com/common-workflow-"
"language/user_guide/blob/main/src/_includes/cwl/custom-"
"types/rich_sparse_otu_table.biom), *rich_sparse_otu_table.biom* e.g. via "
"`wget`:"
msgstr ""

#: ../../src/topics/custom-types.md:30 636449effdeb481da9ada5d283db2ab9
msgid ""
"On line 29, in `inputs:table_type`, a list of allowable table options to "
"be used in the table conversion are imported as a custom object:"
msgstr ""

#: ../../src/topics/custom-types.md:46 d6d41dc3bbd746bab0a5905a8611a356
msgid ""
"The reference to a custom type is a combination of the name of the file "
"in which the object is defined (`biom-convert-table.yaml`) and the name "
"of the object within that file (`table_type`) that defines the custom "
"type. In this case the `symbols` array from the imported `biom-convert-"
"table.yaml` file define the allowable table options. For example, in "
"`custom-types.yml`, we pass `OTU table` as an `input` that tells the tool"
" to create an OTU table in hdf5 format."
msgstr ""

#: ../../src/topics/custom-types.md:53 e742d68f3a994b9595bae07ee2099831
msgid "The contents of the YAML file describing the custom type are given below:"
msgstr ""

#: ../../src/topics/custom-types.md:55 f338008e7fb646038a7dcec456d9dce6
msgid "`biom-convert-table.yaml`"
msgstr ""

#: ../../src/topics/custom-types.md:61 e69fcaf1f01049d6824058969e87e0f0
msgid ""
"In order for the custom type to be used in the CWL description, it must "
"be imported. Imports are described in "
"`requirements:SchemaDefRequirement`, as below in the example `custom-"
"types.cwl` description:"
msgstr ""

#: ../../src/topics/custom-types.md:76 31abe821b66643d098ecdb4e207ed064
msgid ""
"Note also that the author of this CWL description has also included "
"`ResourceRequirement`s, specifying the minimum amount of RAM and number "
"of cores required for the tool to run successfully, as well as details of"
" the version of the software that the description was written for and "
"other useful metadata. These features are discussed further in other "
"chapters of this user guide."
msgstr ""

#: ../../src/topics/environment-variables.md:1 b2a8bdbc4e4347389dc9e2c34e7c71ca
msgid "Environment Variables"
msgstr ""

#: ../../src/topics/environment-variables.md:3 8de1ffb0a81547f7a616d5ea912998c3
msgid ""
"Tools run in a restricted environment and do not inherit most environment"
" variables from the parent process.  You can set environment variables "
"for the tool using `EnvVarRequirement`."
msgstr ""

#: ../../src/topics/environment-variables.md:7 9596b81e881549fba7910947a202ba5e
msgid "`env.cwl`"
msgstr ""

#: ../../src/topics/expression-tool.md:1 8473228fc0104b4c940a967294276542
msgid "Expression Tool"
msgstr ""

#: ../../src/topics/expression-tool.md:3 75f469063959433a8ed459c2b09cd61f
msgid ""
"An expression tool is a type of Process that can be run by itself or as a"
" Workflow step. It executes a pure JavaScript expression. It is meant to "
"be used as a way to isolate complex JavaScript expressions that need to "
"operate on input data and produce some result as output."
msgstr ""

#: ../../src/topics/expression-tool.md:8 6676f841711d43f682e18d954438fc65
msgid ""
"Similar to the command-line tool it requires `inputs` and `outputs`. But "
"instead of `baseCommand`, it requires an `expression` attribute."
msgstr ""

#: ../../src/topics/expression-tool.md:17 d6d043d8ce9a41c59ad0d3239f8f306e
msgid "CWL expression tool."
msgstr ""

#: ../../src/topics/expression-tool.md:48 f3378c740b854b9695ea6ccfb0ab434a
msgid "`uppercase.cwl`"
msgstr ""

#: ../../src/topics/expression-tool.md:67 c9d5c0dd3eeb4617891f90d1a081a3e7
msgid ""
"We had to use an `InlineJavascriptRequirement` as our expression contains"
" a JavaScript call in `.toUpperCase()`. This means to tools using the "
"expression tool that JavaScript is a requirement."
msgstr ""

#: ../../src/topics/expressions.md:1 08240053421545288788e84dec6d6614
msgid "Expressions"
msgstr ""

#: ../../src/topics/expressions.md:3 cf3ebc8d28d2443ca0e67b5974a963ab
msgid ""
"If you need to manipulate input parameters, include the requirement "
"`InlineJavascriptRequirement` and then anywhere a parameter reference is "
"legal you can provide a fragment of Javascript that will be evaluated by "
"the CWL runner."
msgstr ""

#: ../../src/topics/expressions.md:9 767a6dc8370b4f9aad42e07a657e3e1f
msgid ""
"JavaScript expressions should only be used when absolutely necessary. "
"When manipulating file names, extensions, paths etc, consider whether one"
" of the [built in `File` properties][file-prop] like `basename`, "
"`nameroot`, `nameext`, etc, could be used instead. See the [list of best "
"practices](best-practices.md)."
msgstr ""

#: ../../src/topics/expressions.md:16 f38d9e8192614ba689d17c1cc48ac848
msgid "`expression.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:22 ce88970e57f2427a905e1bc66c20ffe8
msgid ""
"As this tool does not require any `inputs` we can run it with an (almost)"
" empty job file:"
msgstr ""

#: ../../src/topics/expressions.md:25 e7238751e3604a34a15fff753136eada
msgid "`empty.yml`"
msgstr ""

#: ../../src/topics/expressions.md:31 ff81d45c3f124c738871b40e5b717d7b
msgid ""
"`empty.yml` contains a description of an empty JSON object. JSON objects "
"descriptions are contained inside curly brackets `{}`, so an empty object"
" is represented simply by a set of empty brackets."
msgstr ""

#: ../../src/topics/expressions.md:35 f92515a70adc4366bc46e2eacf49e47b
msgid "We can then run `expression.cwl`:"
msgstr ""

#: ../../src/topics/expressions.md:37 dcefffb5ecdc4ec3bcc216c21df896ec
msgid "Running `expression.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:47 bdb0a61e53cf4521bc0f16593eaa5fdd
msgid ""
"Note that requirements can be provided with the map syntax, as in the "
"example above:"
msgstr ""

#: ../../src/topics/expressions.md:54 80c3b1fb37aa40038f0bc98905604c47
msgid ""
"Or as an array, with each entry (in this case, only `class: "
"InlineJavascriptRequirement`) marked by a `-`. The same syntax is used to"
" describe the additional command line arguments."
msgstr ""

#: ../../src/topics/expressions.md:62 22a6a66f05c94b988789edfc7acb7951
msgid "Where are JavaScript expressions allowed?"
msgstr ""

#: ../../src/topics/expressions.md:64 f09db29f329141e6b3dc3bf348e62b92
msgid ""
"Just like [parameter references](parameter-references.md), you can use "
"JavaScript Expressions only in certain fields.  These are:"
msgstr ""

#: ../../src/topics/expressions.md:66 ae0f7e0009944da58df73fbc70600fc4
msgid ""
"From "
"[`CommandLineTool`](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool)"
msgstr ""

#: ../../src/topics/expressions.md:67
#: ../../src/topics/parameter-references.md:64 3c17c559cfbb4fbcabd0dd57afd0f710
#: b2c2a86928eb40a18e72586ca43ac3f3
msgid "`arguments`"
msgstr ""

#: ../../src/topics/expressions.md:68 ../../src/topics/expressions.md:76
#: ../../src/topics/expressions.md:89
#: ../../src/topics/parameter-references.md:65
#: ../../src/topics/parameter-references.md:73
#: ../../src/topics/parameter-references.md:86 0042cbd326484bc985f48f469bedff14
#: 447dcc99dc59453ca560d6c54bf8d7bb 996a1497269345569208c861d8bcba6b
#: ab62eac4484146cb83f26c5bc74a92e7 ac9c83c8605d47818cd2eceaa107e44a
#: ee13a1bcafb0428abc6f97816476b8a5
msgid "`valueFrom`"
msgstr ""

#: ../../src/topics/expressions.md:69
#: ../../src/topics/parameter-references.md:66 2054a8bc6ed643129482f73bd0b53823
#: 4bcda5432fe74135ae0d31b4eb0d5d7b
msgid "`stdin`"
msgstr ""

#: ../../src/topics/expressions.md:70
#: ../../src/topics/parameter-references.md:67 4e5551d884b74e5caa0cad273883fa11
#: c37ea64ad4f54949b17e442698e25a49
msgid "`stdout`"
msgstr ""

#: ../../src/topics/expressions.md:71
#: ../../src/topics/parameter-references.md:68 28453a745d8f468b94157409007415de
#: 7b476f5cb3f64cafadbd962d465eacee
msgid "`stderr`"
msgstr ""

#: ../../src/topics/expressions.md:72 12c9aeec38514f7193d41be7d2b81976
msgid ""
"From "
"[CommandInputParameter](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandInputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:73 ../../src/topics/expressions.md:78
#: ../../src/topics/expressions.md:85 ../../src/topics/expressions.md:93
#: ../../src/topics/parameter-references.md:70
#: ../../src/topics/parameter-references.md:75
#: ../../src/topics/parameter-references.md:82
#: ../../src/topics/parameter-references.md:90 280eea3ba89e4d84a5a8bbb14c74e36c
#: 447f71c801564eefa5b04659c834ea23 69f163066cc04c30a34d7b97ac7a4bc2
#: 6a5d8d98b190442f9aadc2c074227835 89fba2d03ddd4cdc943e9175bd0ece33
#: 9a9fa9f67e434ddeb38b339d004aec53 c533a40746e44835a82b1cc6461576b4
#: cca5748633ab4899beddd115e0178db6
msgid "`format`"
msgstr ""

#: ../../src/topics/expressions.md:74 ../../src/topics/expressions.md:79
#: ../../src/topics/expressions.md:86 ../../src/topics/expressions.md:94
#: ../../src/topics/parameter-references.md:71
#: ../../src/topics/parameter-references.md:76
#: ../../src/topics/parameter-references.md:83
#: ../../src/topics/parameter-references.md:91 05182018082a474384e29c2ff90cb060
#: 30217d1193e142729205e28e4cde49d7 308e0245ba0b48fc8f665d12ce5fa0c0
#: 64bef9a598ed4adab4b517bb8f23fb25 7f7bbf1a07684e54b97ca1950c34930b
#: c3ae98ea21e244e3a76d06b87aa8bfae d4f067c6c06c4059b133c18affdac280
#: dae8990502254aa99cc1ba44bd42bc89
msgid "`secondaryFiles`"
msgstr ""

#: ../../src/topics/expressions.md:75 88c61f4dc48f457b828143b1f0e86168
msgid ""
"From "
"[`inputBinding`](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineBinding)"
msgstr ""

#: ../../src/topics/expressions.md:77 2473f34317664da3888f6696f1bce0e7
msgid ""
"From "
"[CommandOutputParamater](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:80 ced207b70446434bbe64d228a34c825d
msgid ""
"From "
"[CommandOutputBinding](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputBinding)"
msgstr ""

#: ../../src/topics/expressions.md:81
#: ../../src/topics/parameter-references.md:78 9b6ddcbbd00c4f5fa4088674586b8b60
#: d02b26eba3b44df5bcc65436f66248f9
msgid "`glob`"
msgstr ""

#: ../../src/topics/expressions.md:82
#: ../../src/topics/parameter-references.md:79 38ebe3bb55484f61be01dbd31274b05c
#: c6018e429f30454cb30a33a92c39bda6
msgid "`outputEval`"
msgstr ""

#: ../../src/topics/expressions.md:83
#: ../../src/topics/parameter-references.md:80 a13cf40c0af743dea7589c4186465d1f
#: f51dc811ec154fd6a0b60d637ae42f06
msgid "From `Workflow`"
msgstr ""

#: ../../src/topics/expressions.md:84 a115dab301e34a958a9acea03c2b76a8
msgid ""
"From "
"[InputParameter](https://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[WorkflowOutputParameter](https://www.commonwl.org/v1.0/Workflow.html#WorkflowOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:87
#: ../../src/topics/parameter-references.md:84 1540eea771934469b6b092c7eba2c223
#: 6876d25a0d324dcabc7ae2e6202378a1
msgid "From `steps`"
msgstr ""

#: ../../src/topics/expressions.md:88 927df10417db4669916e08b9e4e37641
msgid ""
"From "
"[WorkflowStepInput](https://www.commonwl.org/v1.0/Workflow.html#WorkflowStepInput)"
msgstr ""

#: ../../src/topics/expressions.md:90
#: ../../src/topics/parameter-references.md:87 75ec03ffd3e64fabab680a2fcc66e0a4
#: fa2635bff88c49b38401e2c87035d023
msgid ""
"From "
"[ExpressionTool](https://www.commonwl.org/v1.0/Workflow.html#ExpressionTool)"
msgstr ""

#: ../../src/topics/expressions.md:91
#: ../../src/topics/parameter-references.md:88 cbe310d7612e4f68b4832692cc0d145e
#: fa897f1a899141fc9e6be1b6af9c01ce
msgid "`expression`"
msgstr ""

#: ../../src/topics/expressions.md:92 ba5b5e8410df4acab9ad6459df2ff061
msgid ""
"From "
"[InputParameter](https://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[ExpressionToolOutputParameter](https://www.commonwl.org/v1.0/Workflow.html#ExpressionToolOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:95 935d707d1e31415e806b2bbcb851e322
msgid ""
"From "
"[`ResourceRequirement`](https://www.commonwl.org/v1.0/CommandLineTool.html#ResourceRequirement)"
msgstr ""

#: ../../src/topics/expressions.md:96
#: ../../src/topics/parameter-references.md:93 89f051a47b99491b9ce17ded769ad1a3
#: 9d59f22a9e734f8982b89830b4e7e6fc
msgid "`coresMin`"
msgstr ""

#: ../../src/topics/expressions.md:97
#: ../../src/topics/parameter-references.md:94 182e1b73426e4367bf8fe430a415a9c6
#: 5b5d3f05e6c647a38af612c10b2b8b71
msgid "`coresMax`"
msgstr ""

#: ../../src/topics/expressions.md:98
#: ../../src/topics/parameter-references.md:95 3fa480e44ffe473abb3af953f2d000f9
#: 6375ee37a7fd4fa19be33c6f0ae75196
msgid "`ramMin`"
msgstr ""

#: ../../src/topics/expressions.md:99
#: ../../src/topics/parameter-references.md:96 b6d5c6ff972a4607873daa53817a6860
#: d0a0be70585842d8b17a8ddc7fabfc3e
msgid "`ramMax`"
msgstr ""

#: ../../src/topics/expressions.md:100
#: ../../src/topics/parameter-references.md:97 0d558c8e126f427ca9862d7dae8a2cb7
#: 293d592f29e34a5aa4f7420368d2f24b
msgid "`tmpdirMin`"
msgstr ""

#: ../../src/topics/expressions.md:101
#: ../../src/topics/parameter-references.md:98 43f37d9ec9b5429ab811039d1e8211d0
#: b3a9149a14d346fbbc844d4de2cb3acb
msgid "`tmpdirMax`"
msgstr ""

#: ../../src/topics/expressions.md:102
#: ../../src/topics/parameter-references.md:99 5dbe9152fa2b4554a4ceae0b5163a7f8
#: e137a1254667427f816aa6b5219e7f26
msgid "`outdirMin`"
msgstr ""

#: ../../src/topics/expressions.md:103
#: ../../src/topics/parameter-references.md:100
#: 7af83d9455a944c180349d9f3123901c e8219f72a0854febb800511e2897cea1
msgid "`outdirMax`"
msgstr ""

#: ../../src/topics/expressions.md:104 f3f205c655eb4a2fb8c34407ee02fe76
msgid ""
"From "
"[`InitialWorkDirRequirement`](https://www.commonwl.org/v1.0/CommandLineTool.html#InitialWorkDirRequirement)"
msgstr ""

#: ../../src/topics/expressions.md:105
#: ../../src/topics/parameter-references.md:102
#: 0f3325af2b674d07aba8d1b254b7bb67 92c818fc42b64e94b8a3bae737df6ac6
msgid "`listing`"
msgstr ""

#: ../../src/topics/expressions.md:106 a8bc743f7dc648889ce51d8a787597dd
msgid "in [Dirent](https://www.commonwl.org/v1.0/CommandLineTool.html#Dirent)"
msgstr ""

#: ../../src/topics/expressions.md:107
#: ../../src/topics/parameter-references.md:104
#: 04b9cd485e1342d0870c341321089d15 a07dc02fe7bd416994f9755934e6a524
msgid "`entry`"
msgstr ""

#: ../../src/topics/expressions.md:108
#: ../../src/topics/parameter-references.md:105
#: 69d9c547532644408b14655f50175684 df87b2c504dc4ae8865a0f4c94a84dff
msgid "`entryname`"
msgstr ""

#: ../../src/topics/expressions.md:109
#: ../../src/topics/parameter-references.md:106
#: d248acde95024c94b3921e290276a2d1 f77892ff017d48fa833343150cdad6ca
msgid "From `EnvVarRequirement`"
msgstr ""

#: ../../src/topics/expressions.md:110 c0909df1820f40d599151a7b45db2f04
msgid ""
"From "
"[EnvironmentDef](https://www.commonwl.org/v1.0/CommandLineTool.html#EnvironmentDef)"
msgstr ""

#: ../../src/topics/expressions.md:111
#: ../../src/topics/parameter-references.md:108
#: 2d62117b8b824035916716cc818348d4 9f0237a087b5445eb0a8fe474d3e3869
msgid "`envValue`"
msgstr ""

#: ../../src/topics/expressions.md:116 bdbae4965a344e778ed0e80a8e23845d
msgid "Using External Libraries and Inline JavaScript Code with `expressionLib`"
msgstr ""

#: ../../src/topics/expressions.md:118 1af8bb96001e43d9b649044d9631f360
msgid ""
"The requirement `InlineJavascriptRequirement` supports an `expressionLib`"
" attribute that allows users to load external JavaScript files, or to "
"provide inline JavaScript code."
msgstr ""

#: ../../src/topics/expressions.md:122 303ce6bcd17d4a219d2c3f4079e9b332
msgid ""
"Entries added to the `expressionLib` attribute are parsed with the "
"JavaScript engine of a CWL runner. This can be used to include external "
"files or to create JavaScript functions that can be called in other parts"
" of the CWL document."
msgstr ""

#: ../../src/topics/expressions.md:128 d4e0acefb25d458982b37167431c8364
msgid ""
"The CWL standards (versions 1.0 through 1.2) "
"[states](https://www.commonwl.org/v1.0/CommandLineTool.html#Expressions)"
"  that the only version of JavaScript valid in CWL expressions is "
"[ECMAScript 5.1](https://262.ecma-international.org/5.1/). This means "
"that any code that you include or write in your CWL Document must be "
"compliant with ECMAScript 5.1."
msgstr ""

#: ../../src/topics/expressions.md:135 b43add5b2d72451db8eee00a03b347a2
msgid ""
"For example, we can use `InlineJavascriptRequirement` and write a "
"JavaScript function inline in `expressionLib`. That function can then be "
"used in other parts of the CWL document:"
msgstr ""

#: ../../src/topics/expressions.md:139 0908315609f1413392b2ed9b5769a62b
msgid "`hello-world-expressionlib-inline.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:146 d8aac17a8a9c4c209695ce760fc4cffb
msgid ""
"Running this CWL workflow will invoke the JavaScript function and result "
"in the `echo` command printing the input message with capital initial "
"letters:"
msgstr ""

#: ../../src/topics/expressions.md:149 2deae9db0d394245bf21ba3e469fb64f
msgid "Running `hello-world-expressionlib-inline.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:155 6849411091ab422f8ebffc27e68c3286
msgid ""
"Let's move the `capitalizeWords` function to an external file, `custom-"
"functions.js`, and import it in our CWL document:"
msgstr ""

#: ../../src/topics/expressions.md:158 a74d3576acbc4694bbf75d371c57c4b0
msgid "`custom-functions.js`"
msgstr ""

#: ../../src/topics/expressions.md:164 330e32b4188141c083465fd77ac0d962
msgid "`hello-world-expressionlib-external.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:171 61fae30939644f2e830107bb6815659a
msgid ""
"The `custom-functions.js` file is included in the CWL document with the "
"`$include: custom-functions.js` statement. That makes the functions and "
"variables available to be used in other parts of the CWL document."
msgstr ""

#: ../../src/topics/expressions.md:175 8e057a368eae43f892cdfcf1492fefae
msgid "Running `hello-world-expressionlib-external.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:181 108a176667a74331a9c634537c6073be
msgid ""
"Finally, note that you can have both inline and external JavaScript code "
"in your CWL document. In this final example we have added another entry "
"to the `expressionLib` attribute with the new function "
"`createHelloWorldMessage`, that calls the `capitalizeWords` function from"
" the external file `custom-functions.js`."
msgstr ""

#: ../../src/topics/expressions.md:186 dc1a23ba61fe417aab857a2cf3b87d09
msgid "`hello-world-expressionlib.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:193 683b69656c23424d9a171f72cc1ee355
msgid "Running `hello-world-expressionlib.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:200 a2d926603ed24b13a77a64606b72f7db
msgid ""
"The `$include` statement can be used to include a file from the local "
"disk or from a remote location. It works with both relative and absolute "
"paths. Read the [text about "
"`$include`](https://www.commonwl.org/v1.0/SchemaSalad.html#Include) from "
"the CWL specification to learn more about it."
msgstr ""

#: ../../src/topics/file-formats.md:1 f00b6549fb2b40c7a0930fa2d70f78e9
msgid "File Formats"
msgstr ""

#: ../../src/topics/file-formats.md:3 02364803949047ddbad575b3f7ed27a3
msgid ""
"Tools and workflows can take `File` types as input and produce them as "
"output. We also recommend indicating the format for `File` types. This "
"helps document for others how to use your tool while allowing you to do "
"some simple type-checking when creating parameter files."
msgstr ""

#: ../../src/topics/file-formats.md:8 8f25e0b9d6564f089bc07050eecd2cbe
msgid ""
"For file formats, we recommend referencing existing ontologies (like EDAM"
" in our example), reference a local ontology for your institution, or do "
"not add a file format initially for quick development before sharing your"
" tool with others. You can browse existing [IANA file format "
"listings][IANA] and [EDAM file format listings][EDAM] on their websites."
msgstr ""

#: ../../src/topics/file-formats.md:14 051d96f1784a44478c888a692a43020e
msgid ""
"In the next tutorial, we explain  the `$namespaces` and `$schemas` "
"section of the document in greater detail, so don't worry about these for"
" now."
msgstr ""

#: ../../src/topics/file-formats.md:17 c0b16138c24243f7882de4ea02ef14e4
msgid ""
"Note that for added value `cwltool` can do some basic reasoning based on "
"file formats and warn you if there seem to be some obvious mismatches."
msgstr ""

#: ../../src/topics/file-formats.md:20 05c4a830b7084575bfd35263d9226104
msgid "`metadata_example.cwl`"
msgstr ""

#: ../../src/topics/file-formats.md:26
#: ../../src/topics/metadata-and-authorship.md:22
#: 1af1e2ed821a435088471aa1d28c039c 441a574563f246118f24fc1ab8324b2e
msgid "The equivalent of this CWL description in command line format is:"
msgstr ""

#: ../../src/topics/file-formats.md:32 241dfed53c39469d9e340a2494f97572
msgid "Sample Parameter Files"
msgstr ""

#: ../../src/topics/file-formats.md:34 c377cf86598d4ca4bf5311a47978e302
msgid ""
"Below is an example of a parameter file for the example above. We "
"encourage checking in working examples of parameter files for your tool. "
"This allows others to quickly work with your tool, starting from a "
"\"known good\" parameterization."
msgstr ""

#: ../../src/topics/file-formats.md:39 53ff3c58049a4096ae894c4b0214d5cb
msgid "`sample.yml`"
msgstr ""

#: ../../src/topics/file-formats.md:45 6c6c380437634412900e3f8dff4558f6
msgid ""
"___Note:___ To follow the example below, you need to download the example"
" input file, *file-formats.bam*. The file is available from "
"<https://github.com/common-workflow-"
"language/user_guide/raw/main/src/_includes/cwl/file-formats/file-"
"formats.bam>  and can be downloaded e.g. via `wget`:"
msgstr ""

#: ../../src/topics/index.md:1 4ca0f8c05d9e451387a1eda0e6a04dad
msgid "Topics"
msgstr ""

#: ../../src/topics/inputs.md:1 339cc31ba40c4d2cba0ff21d668701b6
msgid "Inputs"
msgstr ""

#: ../../src/topics/inputs.md:3 802f62184fd545eabc2afb78d90930c1
msgid "Essential Input Parameters"
msgstr ""

#: ../../src/topics/inputs.md:5 9b641ae58d834dcc8a79fc547ead64a0
msgid ""
"The `inputs` of a tool is a list of input parameters that control how to "
"run the tool.  Each parameter has an `id` for the name of parameter, and "
"`type` describing what types of values are valid for that parameter."
msgstr ""

#: ../../src/topics/inputs.md:9 8886c014968d4e32b0ce1cc44a9068a0
msgid ""
"Available primitive types are *string*, *int*, *long*, *float*, *double*,"
" and *null*; complex types are *array* and *record*; in addition there "
"are special types *File*, *Directory* and *Any*."
msgstr ""

#: ../../src/topics/inputs.md:13 f40f938f5ac140cea72a4146a3329579
msgid ""
"The following example demonstrates some input parameters with different "
"types and appearing on the command line in different ways."
msgstr ""

#: ../../src/topics/inputs.md:16 415298524e35434ea19a25c31e9ae649
msgid "First, create a file called `inp.cwl`, containing the following:"
msgstr ""

#: ../../src/topics/inputs.md:18 e8b631d0d4e64779aa7333b8e756fcbe
msgid "`inp.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:24 c5f3fddee0734d2da9207d64e268463f
msgid "Create a file called `inp-job.yml`:"
msgstr ""

#: ../../src/topics/inputs.md:26 fed45d1ab5574bd889af14787ac2cd20
msgid "`inp-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:33 1654a2e9bca0443c8fb46f7191beb81a
msgid ""
"You can use `cwltool` to create a template input object. That saves you "
"from having to type all the input parameters in a input object file:"
msgstr ""

#: ../../src/topics/inputs.md:40 b22b453eb5d0497e88243bcfc4d3cb1b
msgid ""
"You can redirect the output to a file, i.e. `cwltool --make-template "
"inp.cwl > inp-job.yml`, and then modify the default values with your "
"desired input values."
msgstr ""

#: ../../src/topics/inputs.md:44 c136e4badbf3429b8c9c9efbc91d7f65
msgid ""
"Notice that \"example_file\", as a `File` type, must be provided as an "
"object with the fields `class: File` and `path`."
msgstr ""

#: ../../src/topics/inputs.md:47 31ddeb567d744c21bbfa76e8cdf95e6d
msgid ""
"Next, create a whale.txt using [touch] by typing `touch whale.txt` on the"
" command line."
msgstr ""

#: ../../src/topics/inputs.md:53 b19099fa3f3a4b5491e094f1ababc4a2
msgid ""
"Now invoke `cwltool` with the tool description and the input object on "
"the command line, using the command `cwltool inp.cwl inp-job.yml`. The "
"following boxed text describes these two commands and the expected output"
" from the command line:"
msgstr ""

#: ../../src/topics/inputs.md:64 685e49311ba547f697fc90073168041b
msgid ""
"The CWL reference runner (cwltool) and other runners create temporary "
"directories with symbolic (\"soft\") links to your input files to ensure "
"that the tools aren't accidentally accessing files that were not "
"explicitly specified"
msgstr ""

#: ../../src/topics/inputs.md:70 d31fc4e804a34097ab506fa3aa469b1d
msgid ""
"The field `inputBinding` is optional and indicates whether and how the "
"input parameter should appear on the tool's command line.  If "
"`inputBinding` is missing, the parameter does not appear on the command "
"line.  Let's look at each example in detail."
msgstr ""

#: ../../src/topics/inputs.md:83 26ca8366924a442d9a3fb26f7223b028
msgid ""
"Boolean types are treated as a flag.  If the input parameter "
"\"example_flag\" is \"true\", then `prefix` will be added to the command "
"line.  If false, no flag is added."
msgstr ""

#: ../../src/topics/inputs.md:95 e9ba36f7d5ff4776aad272c9a0a7a81b
msgid ""
"String types appear on the command line as literal values.  The `prefix` "
"is optional, if provided, it appears as a separate argument on the "
"command line before the parameter .  In the example above, this is "
"rendered as `--example-string hello`."
msgstr ""

#: ../../src/topics/inputs.md:109 bde0dfcb13ea4ac8bab41a8c3fa024ec
msgid ""
"Integer (and floating point) types appear on the command line with "
"decimal text representation.  When the option `separate` is false (the "
"default value is true), the prefix and value are combined into a single "
"argument.  In the example above, this is rendered as `-i42`."
msgstr ""

#: ../../src/topics/inputs.md:124 0a38fa331eaa41ad9d61c869e5b73574
msgid ""
"File types appear on the command line as the path to the file.  When the "
"parameter type ends with a question mark `?` it indicates that the "
"parameter is optional.  In the example above, this is rendered as "
"`--file=/tmp/random/path/whale.txt`.  However, if the \"example_file\" "
"parameter were not provided in the input, nothing would appear on the "
"command line."
msgstr ""

#: ../../src/topics/inputs.md:131 afe9f6fca7314610b25aa519d145f1c8
msgid ""
"Input files are read-only.  If you wish to update an input file, you must"
" [first copy it to the output directory](staging-input-files.md)."
msgstr ""

#: ../../src/topics/inputs.md:134 e976913dca354fd1b027ceba53e279fd
msgid ""
"The value of `position` is used to determine where parameter should "
"appear on the command line.  Positions are relative to one another, not "
"absolute.  As a result, positions do not have to be sequential, three "
"parameters with positions 1, 3, 5 will result in the same command line as"
" 1, 2, 3.  More than one parameter can have the same position (ties are "
"broken using the parameter name), and the position field itself is "
"optional.  The default position is 0."
msgstr ""

#: ../../src/topics/inputs.md:142 3f5437225c06473ca6d99f256b735771
msgid ""
"The `baseCommand` field will always appear in the final command line "
"before the parameters."
msgstr ""

#: ../../src/topics/inputs.md:146 e0a6c25648394dc4a06c1a1ab11656d1
msgid "Array Inputs"
msgstr ""

#: ../../src/topics/inputs.md:148 895ca55530674398af4f3ab0a2ff8295
msgid ""
"It is easy to add arrays of input parameters represented to the command "
"line. There are two ways to specify an array parameter. First is to "
"provide `type` field with `type: array` and `items` defining the valid "
"data types that may appear in the array. Alternatively, brackets `[]` may"
" be added after the type name to indicate that input parameter is array "
"of that type."
msgstr ""

#: ../../src/topics/inputs.md:154 2c9f27b7c4534f5087194653288fc473
msgid "`array-inputs.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:160 2f54898bb89b4f24abcbb9e032b14fac
msgid "`array-inputs-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:166 ../../src/topics/outputs.md:82
#: ../../src/topics/outputs.md:105 07e7e4b0f9d047aba2b860033e9c939c
#: 12a54ad82e994ce485e2996d4e804373 5fb5d18d006242c2ad4cd143c6e6b5c4
msgid ""
"Now invoke `cwltool` providing the tool description and the input object "
"on the command line:"
msgstr ""

#: ../../src/topics/inputs.md:178 36d386d92a7a47099dff930b89063d26
msgid ""
"The `inputBinding` can appear either on the outer array parameter "
"definition or the inner array element definition, and these produce "
"different behavior when constructing the command line, as shown above. In"
" addition, the `itemSeparator` field, if provided, specifies that array "
"values should be concatenated into a single argument separated by the "
"item separator string."
msgstr ""

#: ../../src/topics/inputs.md:185 eb22abf9766e441f835aaad0d12fe198
msgid ""
"Note that the arrays of inputs are specified inside square brackets `[]` "
"in `array-inputs-job.yml`. Arrays can also be expressed over multiple "
"lines, where array values that are not defined with an associated key are"
" marked by a leading `-`. This will be demonstrated in the next lesson "
"and is discussed in more detail in the [YAML Guide](yaml-"
"guide.md#arrays). You can specify arrays of arrays, arrays of records, "
"and other complex types."
msgstr ""

#: ../../src/topics/inputs.md:191 dad1426793764a71ab0a71c8f6872da4
msgid "Inclusive and Exclusive Inputs"
msgstr ""

#: ../../src/topics/inputs.md:193 22c9fdaebc8c4e0f9e1e8b72ef87003a
msgid ""
"Sometimes an underlying tool has several arguments that must be provided "
"together (they are dependent) or several arguments that cannot be "
"provided together (they are exclusive).  You can use records and type "
"unions to group parameters together to describe these two conditions."
msgstr ""

#: ../../src/topics/inputs.md:198 c1e21b305da34c6b8960ebe5ca0d60bc
msgid "`record.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:204 5f3e64b47249408c9a1e006d27826a48
msgid "`record-job1.yml`"
msgstr ""

#: ../../src/topics/inputs.md:215 76984af8223c45688a49ca7082b24cc3
msgid ""
"In the first example, you can't provide `itemA` without also providing "
"`itemB`."
msgstr ""

#: ../../src/topics/inputs.md:217 ff1dff0c91ac4324acc01188f2ef2bab
msgid "`record-job2.yml`"
msgstr ""

#: ../../src/topics/inputs.md:233 951aff2f38bc43c8bd1086a9e62243fe
msgid ""
"In the second example, `itemC` and `itemD` are exclusive, so only the "
"first matching item (`itemC`) is added to the command line and remaining "
"item (`itemD`) is ignored."
msgstr ""

#: ../../src/topics/inputs.md:236 ac93b8f5dd1646b8bbb7f5edc86ad2c7
msgid "`record-job3.yml`"
msgstr ""

#: ../../src/topics/inputs.md:252 baa943e150554186ace37f310442a8a0
msgid ""
"In the third example, only `itemD` is provided, so it appears on the "
"command line."
msgstr ""

#: ../../src/topics/inputs.md:255 53f7e15ad5dc472faf409f30d902d4ce
msgid "Exclusive Input Parameters with Expressions"
msgstr ""

#: ../../src/topics/inputs.md:257 1c455770202547a0bc3c62c063a0b3ed
msgid ""
"If you use exclusive input parameters combined with expressions, you need"
" to be aware that the `inputs` JavaScript object will contain one of the "
"exclusive input values. This means that you might need to use an **or** "
"boolean operator to check which values are present."
msgstr ""

#: ../../src/topics/inputs.md:262 918873fedf60421f9e3713f82ac0c207
msgid ""
"Let's use an example that contains an exclusive `file_format` input "
"parameter that accepts `null` (i.e. no value provided), or any value from"
" an enum."
msgstr ""

#: ../../src/topics/inputs.md:265 4999688d5c954eb48fc42524e7a33176
msgid "`exclusive-parameter-expressions.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:271 294545640c6148dc8043027d4e4ea7d4
msgid ""
"Note how the JavaScript expression uses the value of the exclusive input "
"parameter without taking into consideration a `null` value. If you "
"provide a valid value, such as “fasta” (one of the values of the enum), "
"your command should execute successfully:"
msgstr ""

#: ../../src/topics/inputs.md:280 258d3d9ec6bb410eb012f89b44bf4072
msgid ""
"However, if you do not provide any input value, then `file_format` will "
"be evaluated to a `null` value, which does not match the expected type "
"for the output field (a `string`), resulting in failure when running your"
" workflow."
msgstr ""

#: ../../src/topics/inputs.md:289 6470c55fcf5e45b09534705df1fb4e7b
msgid ""
"To correct it, you must remember to use an or operator in your JavaScript"
" expression when using exclusive parameters, or any parameter that allows"
" `null`. For example, the expression could be changed to "
"`$(inputs.file_format || 'auto')`, to have a default value if none was "
"provided in the command line or job input file."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:1
#: 0bf3128f26ef41f7b31418f506dc83d4
msgid "Metadata and Authorship"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:3
#: ef7ddf8716214cfbb8a411a13967198a
msgid ""
"Implementation extensions not required for correct execution (for "
"example, fields related to GUI presentation) and metadata about the tool "
"or workflow itself (for example, authorship for use in citations) may be "
"provided as additional fields on any object. Such extensions fields (e.g."
" `format: edam:format_2572`) can use a namespace prefix listed in the "
"`$namespaces` section of the document (e.g. edam: "
"http://edamontology.org/) as described in the [Schema Salad specification"
"][schema-salad]. Once you add the namespace prefix, you can access it "
"anywhere in the document as shown below. Otherwise, one must use full "
"URLs: `format: http://edamontology.org/format_2572`."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:13
#: 913df947afb7420097be3f15caede947
msgid ""
"For all developers, we recommend the following minimal metadata for your "
"tool and workflows. This example includes metadata allowing others to "
"cite your tool."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:16
#: 4c773c6b1db9460ba58d5d276781d6e7
msgid "`metadata_example2.cwl`"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:28
#: c593b5d1f7e1469da7e97ca737632bc2
msgid "Extended Example"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:30
#: 28f6bc9a1465450ead788703b8329902
msgid ""
"For those that are highly motivated, it is also possible to annotate your"
" tool with a much larger amount of metadata. This example includes EDAM "
"ontology tags as keywords (allowing the grouping of related tools), hints"
" at hardware requirements in order to use the tool, and a few more "
"metadata fields."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:35
#: 84b37f20f8cb4136b274ecef284039fa
msgid "`metadata_example3.cwl`"
msgstr ""

#: ../../src/topics/operations.md:1 391ca127d3594bf0bd12a3ed29a85fc7
msgid "Operations"
msgstr ""

#: ../../src/topics/operations.md:3 e58e02c974ca451ca7e52d4a7e14ad99
msgid ""
"An Operation is a type of CWL process, just like a workflow, a command-"
"line tool, or an expression tool. It is a step of a workflow that "
"specifies inputs and outputs, but it does not provide enough information "
"to be executed."
msgstr ""

#: ../../src/topics/operations.md:7 b725956dd0ff4906b54a002afacafd09
msgid ""
"You can create operations to visualize a workflow during development, "
"before you are ready to submit the workflow to a CWL runner:"
msgstr ""

#: ../../src/topics/operations.md:10 42e684d404aa4715a538bc209e84b469
msgid "`operations.cwl`"
msgstr ""

#: ../../src/topics/operations.md:16 3bc2f8d60cce460788cff24274fee913
msgid ""
"The `uppercase` step of the workflow is an operation. It can be used like"
" a command line tool or an expression. You can also plot it with the CWL "
"Viewer or `cwltool`:"
msgstr ""

#: ../../src/topics/operations.md:24 910029acb5864b919b452e62a365c789
msgid ""
"The output of the command above can be rendered with a Graphviz renderer."
" The following image is rendered with the Sphinx Graphviz directive (this"
" user guide is built with Sphinx):"
msgstr ""

#: ../../src/topics/operations.md:55 edcbb0fc660840f29309e24a1f934d25
msgid ""
"If you try running it with `cwltool`, the command will fail since "
"`cwltool` does not have enough information to know how to execute it:"
msgstr ""

#: ../../src/topics/operations.md:58 14bf9940996647ac91ea2de9e95dbe13
msgid "`cwltool` does not know how to run operations"
msgstr ""

#: ../../src/topics/operations.md:66 71459c6b3efa47a1856c8f22f1b529da
msgid ""
"CWL runners may come up with ways to bind operations to concrete steps. A"
" CWL runner could, for instance, use abstract operations with ID's that "
"correspond to steps executed by a different workflow engine."
msgstr ""

#: ../../src/topics/outputs.md:1 77937377da354c46afb8c7d4988cf964
msgid "Outputs"
msgstr ""

#: ../../src/topics/outputs.md:3 7dbd814741e4452e95af2bddbbd41c73
msgid "Returning Output Files"
msgstr ""

#: ../../src/topics/outputs.md:5 10965b18de5841eda0658840d0e726c4
msgid ""
"The `outputs` of a tool is a list of output parameters that should be "
"returned after running the tool.  Each parameter has an `id` for the name"
" of parameter, and `type` describing what types of values are valid for "
"that parameter."
msgstr ""

#: ../../src/topics/outputs.md:10 d1ebab8483744101b29a095067495897
msgid ""
"When a tool runs under CWL, the starting working directory is the "
"designated output directory.  The underlying tool or script must record "
"its results in the form of files created in the output directory.  The "
"output parameters returned by the CWL tool are either the output files "
"themselves, or come from examining the content of those files."
msgstr ""

#: ../../src/topics/outputs.md:16 030b920fe9ee445f9f996aef68087129
msgid ""
"The following example demonstrates how to return a file that has been "
"extracted from a tar file."
msgstr ""

#: ../../src/topics/outputs.md:19 81f1b2d425f244728504cab01a06dfeb
msgid "Passing mandatory arguments to the `baseCommand`"
msgstr ""

#: ../../src/topics/outputs.md:21 d23514327fbd476d87e9a3308cac38e4
msgid ""
"In previous examples, the `baseCommand` was just a string, with any "
"arguments passed as CWL inputs. Instead of a single string we can use an "
"_array of strings_.  The first element is the command to run, and any "
"subsequent elements are mandatory command line arguments"
msgstr ""

#: ../../src/topics/outputs.md:26 ebae564b85824cd1818837689b134af5
msgid "`tar.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:32 94a88afd7acc4576b8cc22780991d629
msgid "`tar-job.yml`"
msgstr ""

#: ../../src/topics/outputs.md:38 a4dc894fe82e4b779771b512424ce70c
msgid "Next, create a tar file for the example."
msgstr ""

#: ../../src/topics/outputs.md:45 dfd9feebfc7049498f807dfeb91e70e3
msgid ""
"And now invoke `cwltool` with the tool description and the input object "
"on the command line:"
msgstr ""

#: ../../src/topics/outputs.md:51 343cba8708a14ff9bd281fdff790bf39
msgid ""
"The field `outputBinding` describes how to set the value of each output "
"parameter."
msgstr ""

#: ../../src/topics/outputs.md:62 485a5a4cba354640a53832e4c7460fcb
msgid ""
"The `glob` field consists of the name of a file in the output directory. "
"If you don't know name of the file in advance, you can use a wildcard "
"pattern like `glob: '*.txt'`."
msgstr ""

#: ../../src/topics/outputs.md:65 bafc8ef1a46b4f97af05a146a8903e2f
msgid "Capturing Standard Output"
msgstr ""

#: ../../src/topics/outputs.md:67 3fafdc8d21344bceb8262e8534e34afe
msgid ""
"To capture a tool's standard output stream, add the `stdout` field with "
"the name of the file where the output stream should go.  Then add `type: "
"stdout` on the corresponding output parameter."
msgstr ""

#: ../../src/topics/outputs.md:71 14fff0b709774a4cbb9213dc97ae9d42
msgid "`stdout.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:89 ae07eb32467f40189765939c2fb4f6ae
msgid "Array Outputs"
msgstr ""

#: ../../src/topics/outputs.md:91 98aa9d49f5b14429b5fb9e38ab9c594d
msgid ""
"You can also capture multiple output files into an array of files using "
"`glob`."
msgstr ""

#: ../../src/topics/outputs.md:93 ddb1cc7a7f6f44cd96748c88753b5bdf
msgid "`array-outputs.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:99 af69c5bbfac241809fd6e882dc1cafdd
msgid "`array-outputs-job.yml`"
msgstr ""

#: ../../src/topics/outputs.md:112 7910b5ce6997467096db8d432cfb2088
msgid ""
"As described in the [YAML Guide](yaml-guide.md#arrays), the array of "
"expected outputs is specified in `array-outputs-job.yml` with each entry "
"marked by a leading `-`. This format can also be used in CWL descriptions"
" to mark entries in arrays, as demonstrated in several of the upcoming "
"sections."
msgstr ""

#: ../../src/topics/parameter-references.md:1 11452076e78d4ccd9773b301d831d350
msgid "Parameter References"
msgstr ""

#: ../../src/topics/parameter-references.md:3 f8227a94ae9544a189886f90e9a3433c
msgid ""
"In a previous example, we extracted a file using the \"tar\" program. "
"However, that example was very limited because it assumed that the file "
"we were interested in was called \"hello.txt\", and this was written into"
" the `.cwl` file. This is not the best way to do this, as the "
"\"hello.txt\" filename may vary or be dependent on the input file(s) "
"used.  To avoid this we can specify the name of the file we want in the "
"job parameters file (`.yml`). In this example, you will see how to "
"reference the value of input parameters dynamically from other fields, "
"which will allow us to then specify the name of the file to extract."
msgstr ""

#: ../../src/topics/parameter-references.md:13 38a045a2b8614cbba3a02d4f27b50127
msgid "`tar-param.cwl`"
msgstr ""

#: ../../src/topics/parameter-references.md:19 13529a4cc80a4070b85bf29829c762b1
msgid "`tar-param-job.yml`"
msgstr ""

#: ../../src/topics/parameter-references.md:25 da5a588a3155445098b7ad81b78f1fa4
msgid ""
"Create your input files and invoke `cwltool` with the tool description "
"and the input object on the command line:"
msgstr ""

#: ../../src/topics/parameter-references.md:36 9e91e38ca0e4473384498c6e28b1f116
msgid ""
"Certain fields permit parameter references which are enclosed in "
"`$(...)`. These are evaluated and replaced with value being referenced."
msgstr ""

#: ../../src/topics/parameter-references.md:47 a0e0270144df4b6aa3bf0ad261938b17
msgid ""
"References are written using a subset of Javascript syntax.  In this "
"example, `$(inputs.extractfile)`, `$(inputs[\"extractfile\"])`, and "
"`$(inputs['extractfile'])` are equivalent."
msgstr ""

#: ../../src/topics/parameter-references.md:51 a4a0147041724445b7ab3459cbc786b0
msgid ""
"The value of the \"inputs\" variable is the input object provided when "
"the CWL tool was invoked."
msgstr ""

#: ../../src/topics/parameter-references.md:54 ea5153744a3d41dc883c4bb7df4e16de
msgid ""
"Note that because `File` parameters are objects, to get the path to an "
"input file you must reference the path field on a file object; to "
"reference the path to the tar file in the above example you would write "
"`$(inputs.tarfile.path)`."
msgstr ""

#: ../../src/topics/parameter-references.md:59 84270504a1c445d2917825b8e854a80d
msgid "Where are parameter references allowed?"
msgstr ""

#: ../../src/topics/parameter-references.md:61 9616d24145e74d17ac76cbe80ee4972a
msgid "You can only use parameter references in certain fields.  These are:"
msgstr ""

#: ../../src/topics/parameter-references.md:63 fe869638aa4a4cd3a43bc071ed66cb37
msgid ""
"From "
"[`CommandLineTool`](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool)"
msgstr ""

#: ../../src/topics/parameter-references.md:69 1e3f77c12d1c48a7b2df7cdccfe92d41
msgid ""
"From "
"[CommandInputParameter](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandInputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:72 2b86b2eb9a2e4310923aa3e3c16fac1a
msgid ""
"From "
"[`inputBinding`](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineBinding)"
msgstr ""

#: ../../src/topics/parameter-references.md:74 6ad56ee119684a83b42821f3b366cc73
msgid ""
"From "
"[CommandOutputParamater](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:77 11b45dd3f4a644b2b6175fb9bf4219ad
msgid ""
"From "
"[CommandOutputBinding](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputBinding)"
msgstr ""

#: ../../src/topics/parameter-references.md:81 c5446e59a6bd4a3cbfc0ed2cd21783f4
msgid ""
"From "
"[InputParameter](http://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[WorkflowOutputParameter](http://www.commonwl.org/v1.0/Workflow.html#WorkflowOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:85 3fefaf0fbde94a85be6db02643d0a5ec
msgid ""
"From "
"[WorkflowStepInput](http://www.commonwl.org/v1.0/Workflow.html#WorkflowStepInput)"
msgstr ""

#: ../../src/topics/parameter-references.md:89 3911b95f4a72415f968ed640f445bd00
msgid ""
"From "
"[InputParameter](http://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[ExpressionToolOutputParameter](http://www.commonwl.org/v1.0/Workflow.html#ExpressionToolOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:92 841837a2edca4aff8231a0b955def3a4
msgid ""
"From "
"[`ResourceRequirement`](http://www.commonwl.org/v1.0/CommandLineTool.html#ResourceRequirement)"
msgstr ""

#: ../../src/topics/parameter-references.md:101
#: 665c8d7b622441cda2c1f6b20da5d664
msgid ""
"From "
"[`InitialWorkDirRequirement`](http://www.commonwl.org/v1.0/CommandLineTool.html#InitialWorkDirRequirement)"
msgstr ""

#: ../../src/topics/parameter-references.md:103
#: cb71700c69694a53a62a43ef11a62595
msgid "in [Dirent](http://www.commonwl.org/v1.0/CommandLineTool.html#Dirent)"
msgstr ""

#: ../../src/topics/parameter-references.md:107
#: 6be0e1471d164c5099c0ccc2824cf038
msgid ""
"From "
"[EnvironmentDef](http://www.commonwl.org/v1.0/CommandLineTool.html#EnvironmentDef)"
msgstr ""

#: ../../src/topics/requirements-and-hints.md:5
#: 5984d3f30ab14197bcc03ce556bad3ab
msgid "Requirements and Hints"
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:1
#: 5357d8f77e504324a2904e7dc327e46a
msgid "Specifying Software Requirements"
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:3
#: 1bbff970e33144148c394d7f18ebfd96
msgid ""
"Often, tool descriptions will be written for a specific version of a "
"software. To make it easier for others to use your descriptions, you can "
"include a `SoftwareRequirement` field in the `hints` section. This may "
"also help to avoid confusion about which version of a tool the "
"description was written for."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:13
#: 0774b6bc9c8f4ab0acf943ed07f4b0d4
msgid ""
"In this example, the software requirement being described is InterProScan"
" version 5.21-60."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:25
#: 5cadc31694ee45d99ffa369983971756
msgid ""
"Depending on your CWL runner, these hints may be used to check that the "
"required software is installed and available before the job is run. To "
"enable these checks with the reference implementation, use the "
"[dependency resolvers configuration][dependencies]."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:29
#: a8a0b7191ce9404292df0699b96c51d6
msgid ""
"As well as a version number, a unique resource identifier (URI) for the "
"tool is given in the form of an [RRID][rrid]. Resources with RRIDs can be"
" looked up in the [SciCrunch][scicrunch] registry, which provides a "
"portal for finding, tracking, and referring to scientific resources "
"consistently. If you want to specify a tool as a `SoftwareRequirement`, "
"search for the tool on SciCrunch and use the RRID that it has been "
"assigned in the registry. (Follow this [Adding a Resource Tutorial"
"][scicrunch-add-tool] to add a tool to SciCrunch). You can use this RRID "
"to refer to the tool (via [identifiers.org][identifiers]) in the `specs` "
"field of your requirement description. Other good choices, in order of "
"preference, are to include the DOI for the main tool citation and the URL"
" to the tool."
msgstr ""

#: ../../src/topics/staging-input-files.md:1 86c81fb6d34b4b36ac8778c79cbc0306
msgid "Staging Input Files"
msgstr ""

#: ../../src/topics/staging-input-files.md:3 4bd8293be25d401a868df24fabfc6538
msgid ""
"Normally, input files are located in a read-only directory separate from "
"the output directory.  This causes problems if the underlying tool "
"expects to write its output files alongside the input file in the same "
"directory.  You use `InitialWorkDirRequirement` to stage input files into"
" the output directory. In this example, we use a JavaScript expression to"
" extract the base name of the input file from its leading directory path."
msgstr ""

#: ../../src/topics/staging-input-files.md:9 05c39f514e234bd88895716c99eabcda
msgid "`linkfile.cwl`"
msgstr ""

#: ../../src/topics/troubleshooting.md:1 83fa50745b7e486db93f4d7883a778cc
msgid "Troubleshooting"
msgstr ""

#: ../../src/topics/troubleshooting.md:3 d8d67e5238d049479e9c1a1c4b9b62c3
msgid ""
"In this section you will find ways to troubleshoot when you have problems"
" executing CWL. We focus on `cwltool` here but some of these techniques "
"may apply to other CWL Runners."
msgstr ""

#: ../../src/topics/troubleshooting.md:6 60e89aea0d634296a9753910a55a4493
msgid "Run `cwltool` with `cachedir`"
msgstr ""

#: ../../src/topics/troubleshooting.md:8 7ff74ba8fd9443cc9e1cdda32e38ca7c
msgid ""
"You can use the `--cachedir` option when running a workflow to tell "
"`cwltool` to cache intermediate files (files that are not input nor "
"output files, but created while your workflow is running). By default, "
"these files are created in a temporary directory but writing them to a "
"separate directory makes accessing them easier."
msgstr ""

#: ../../src/topics/troubleshooting.md:14 1c8afaa3ef0c41b2a1ebc57d329d6ed4
msgid ""
"In the following example `troubleshooting-wf1.cwl` we have two steps, "
"`step_a` and `step_b`. The workflow is equivalent to `echo \"Hello "
"World\" | rev`, which would print the message \"Hello World\" reversed, "
"i.e. \"dlroW olleH\". However, the second step, `step_b`, **has a typo**,"
" where instead of executing the `rev` command it tries to execute `revv`,"
" which fails."
msgstr ""

#: ../../src/topics/troubleshooting.md:20 b540a4f7a25148098a369350e22c247a
msgid "`troubleshooting-wf1.cwl`"
msgstr ""

#: ../../src/topics/troubleshooting.md:27 1cda8c6f9ed6421bafb39554bdc9b5f7
msgid ""
"Let's execute this workflow with `/tmp/cachedir/` as the `--cachedir` "
"value (`cwltool` will create the directory for you if it does not exist "
"already):"
msgstr ""

#: ../../src/topics/troubleshooting.md:35 93b8b99518474d709a90f5442c0d2b65
msgid ""
"The workflow is in the `permanentFail` status due to `step_b` failing to "
"execute the non-existent `revv` command. The `step_a` was executed "
"successfully and its output has been cached in your `cachedir` location. "
"You can inspect the intermediate files created:"
msgstr ""

#: ../../src/topics/troubleshooting.md:44 059deec3f12448b8a673e1d957595d7d
msgid ""
"Each workflow step has received a unique ID (the long value that looks "
"like a hash). The `${HASH}.status` files display the status of each step "
"executed by the workflow. And the `step_a` output file `stdout.txt` is "
"visible in the output of the command above."
msgstr ""

#: ../../src/topics/troubleshooting.md:48 9c40b03256274b43a484b2a1108186c5
msgid ""
"Now fix the typo so `step_b` executes `rev` (i.e. replace `revv` by `rev`"
" in the `step_b`). After fixing the typo, when you execute `cwltool` with"
" the same arguments as the previous time, note that now `cwltool` output "
"contains information about pre-cached outputs for `step_a`, and about a "
"new cache entry for the output of `step_b`. Also note that the status of "
"`step_b` is now of success."
msgstr ""

#: ../../src/topics/troubleshooting.md:59 45314aa766a5479f9855cbc054ad17b9
msgid ""
"In this example the workflow step `step_a` was not re-evaluated as it had"
" been cached, and there was no change in its execution or output. "
"Furthermore, `cwltool` was able to recognize when it had to re-evaluate "
"`step_b` after we fixed the executable name. This technique is useful for"
" troubleshooting your CWL documents and also as a way to prevent "
"`cwltool` to re-evaluate steps unnecessarily."
msgstr ""

#: ../../src/topics/using-containers.md:1 8289b75b054040e5bfa71f482554eb4e
msgid "Using Containers"
msgstr ""

#: ../../src/topics/using-containers.md:3 333b0ee71bde4ce8aacf4ff8946dfbfe
msgid "Running Tools Inside Docker"
msgstr ""

#: ../../src/topics/using-containers.md:5 54ef32fbf91a4edfa0006f62b51bcbb9
msgid ""
"[Docker][docker] containers simplify software installation by providing a"
" complete known-good runtime for software and its dependencies.  However,"
" containers are also purposefully isolated from the host system, so in "
"order to run a tool inside a Docker container there is additional work to"
" ensure that input files are available inside the container and output "
"files can be recovered from the container.  A CWL runner can perform this"
" work automatically, allowing you to use Docker to simplify your software"
" management while avoiding the complexity of invoking and managing Docker"
" containers."
msgstr ""

#: ../../src/topics/using-containers.md:15 de34c8de4fda441d80abb9990e75b494
msgid ""
"One of the responsibilities of the CWL runner is to adjust the paths of "
"input files to reflect the location where they appear inside the "
"container."
msgstr ""

#: ../../src/topics/using-containers.md:18 fbd75c368e6444d89978f010a235709c
msgid ""
"This example runs a simple Node.js script inside a Docker container which"
" will then print \"Hello World\" to the standard output."
msgstr ""

#: ../../src/topics/using-containers.md:21 88ba9fb9da1d493ca8a4e37982ff27dd
msgid "`docker.cwl`"
msgstr ""

#: ../../src/topics/using-containers.md:27 76dc921551ac44de9f07583d304bde3a
msgid "`docker-job.yml`"
msgstr ""

#: ../../src/topics/using-containers.md:33 20b169511e734f0fb8b047b06e442146
msgid ""
"Before we run this, let's just break it down and see what some bits do.  "
"Most of this has been explained in previous sections, the only part that "
"is really new is the `dockerRequirement` section."
msgstr ""

#: ../../src/topics/using-containers.md:44 bb3199ee47b746529f088a323a72a434
msgid ""
"`baseCommand: node` tells CWL that we will be running this command using "
"the Node Js runtime that is meant for Javascript files. We then need to "
"specify some `hints` for how to find the container we want.  In this case"
" we list just our requirements for the docker container in "
"`DockerRequirements`.  The `dockerPull:` parameter takes the same value "
"that you would pass to a `docker pull` command. That is, the name of the "
"container image (you can even specify the tag, which is good idea for "
"best practices when using containers for reproducible research). In this "
"case we have used a container called `node:slim`."
msgstr ""

#: ../../src/topics/using-containers.md:52 562109bed3cc4da896d8307f74244552
msgid ""
"Create a Javascript file named \"hello.js\" and invoke `cwltool` "
"providing the tool description and the input object on the command line:"
msgstr ""

#: ../../src/topics/using-containers.md:55 417e5bfea2ac485b880ee544984996ea
msgid "`hello.js`"
msgstr ""

#: ../../src/topics/using-containers.md:69 ecd67cff285a43b5b66777032c7f690c
msgid ""
"Notice the CWL runner has constructed a Docker command line to run the "
"script."
msgstr ""

#: ../../src/topics/using-containers.md:72 e5b8c1e93fda4043839ef0dc204f2ec1
msgid ""
"In this example, the path to the script `hello.js` is "
"`/home/me/cwl/user_guide/hello.js` outside the container but "
"`/var/lib/cwl/job369354770_examples/hello.js` inside the container, as "
"reflected in the invocation of the `node` command."
msgstr ""

#: ../../src/topics/workflows.md:1 d09c4c6d692548d4b317e5c74445795f
msgid "Workflows"
msgstr ""

#: ../../src/topics/workflows.md:3 9e3bc00a91f948eeb26624078dce6823
msgid ""
"A workflow is a CWL processing unit that executes command-line tools, "
"expression tools, or workflows (sub-workflows) as steps. It must have "
"`inputs`, `outputs`, and `steps` defined in the CWL document."
msgstr ""

#: ../../src/topics/workflows.md:13 177aaf8abaf940d1ac006423998974fa
msgid "CWL workflow."
msgstr ""

#: ../../src/topics/workflows.md:41 28308117076d4adcaf0f923c3f52d666
msgid ""
"The CWL document `echo-uppercase.cwl` defines a workflow that runs the "
"command-line tool, and the expression tool showed in the earlier "
"examples."
msgstr ""

#: ../../src/topics/workflows.md:51 c851029a3fa542b6ac21e00675661ca1
msgid "`echo-uppercase.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:81 30cb988a8f814823a5dfb2f6ca3928fc
msgid ""
"A command-line tool or expression tool can also be written directly in "
"the same CWL document as the workflow. For example, we can rewrite the "
"`echo-uppercase.cwl` workflow as a single file:"
msgstr ""

#: ../../src/topics/workflows.md:91 a7c8734f60664e619c63b98e5d3399b9
msgid "`echo-uppercase-single-file.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:150 f4bb9b7b6ada46a4a1701daaac993798
msgid ""
"Having separate files helps with modularity and code organization. But it"
" can be helpful writing everything in a single file for development. "
"There are other ways to combine multiple files into a single file (e.g. "
"`cwltool --pack`) discussed further in other sections of this user guide."
msgstr ""

#: ../../src/topics/workflows.md:160 f4da934d636f4455a63f5ecbda2cfdea
msgid ""
"For a sub-workflows you need to enable the requirement "
"`SubworkflowFeatureRequirement`. It is covered in another section of this"
" user guide in more detail."
msgstr ""

#: ../../src/topics/workflows.md:165 529d327e58f64544aa02b075976aee32
msgid "Writing Workflows"
msgstr ""

#: ../../src/topics/workflows.md:167 a4207261aa314fd98cbfdc368d96c1b6
msgid ""
"This workflow extracts a java source file from a tar file and then "
"compiles it."
msgstr ""

#: ../../src/topics/workflows.md:170 7571eba01bc44d0a97d8f283f19a8b49
msgid "`1st-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:179 ../../src/topics/workflows.md:180
#: 8e58b0c4e12e4a1183fe7b33e8ee39e6 c8833b0a5dc04e35a48575713bed3f24
msgid "Visualization of 1st-workflow.cwl"
msgstr ""

#: ../../src/topics/workflows.md:180 6a0e9118c6ee49fbb9111504dcebe190
msgid ""
"[![Visualization of 1st-"
"workflow.cwl](https://view.commonwl.org/graph/png/github.com/common-"
"workflow-"
"language/user_guide/blob/a29e7eae0006660946fc705a310b37a21a7e1edc/_includes/cwl/21"
"-1st-workflow/1st-"
"workflow.cwl)](https://view.commonwl.org/graph/png/github.com/common-"
"workflow-"
"language/user_guide/blob/a29e7eae0006660946fc705a310b37a21a7e1edc/_includes/cwl/21"
"-1st-workflow/1st-workflow.cwl)"
msgstr ""

#: ../../src/topics/workflows.md:183 87e0059d86b64212a1cceee185fe264d
msgid ""
"Use a YAML or a JSON object in a separate file to describe the input of a"
" run:"
msgstr ""

#: ../../src/topics/workflows.md:185 77943b217ba34d409ed4a18fd262388f
msgid "`1st-workflow-job.yml`"
msgstr ""

#: ../../src/topics/workflows.md:191 aceb3bee46034a94bdb6784a8c1a484c
msgid ""
"Next, create a sample Java file and add it to a tar file to use with the "
"command-line tool."
msgstr ""

#: ../../src/topics/workflows.md:205 916621f2ca5d47c4935d68d20c5ea616
msgid "What's going on here?  Let's break it down:"
msgstr ""

#: ../../src/topics/workflows.md:212 4a0ceee7f9ac4e80994ac8a750d77855
msgid ""
"The `cwlVersion` field indicates the version of the CWL spec used by the "
"document.  The `class` field indicates this document describes a "
"workflow."
msgstr ""

#: ../../src/topics/workflows.md:221 3408935eb4f945349e00486a8df27c39
msgid ""
"The `inputs` section describes the inputs of the workflow.  This is a "
"list of input parameters where each parameter consists of an identifier "
"and a data type.  These parameters can be used as sources for input to "
"specific workflows steps."
msgstr ""

#: ../../src/topics/workflows.md:233 c0790bc2b8a34016b2eb3d64f0b8903e
msgid ""
"The `outputs` section describes the outputs of the workflow.  This is a "
"list of output parameters where each parameter consists of an identifier "
"and a data type.  The `outputSource` connects the output parameter "
"`classfile` of the `compile` step to the workflow output parameter "
"`compiled_class`."
msgstr ""

#: ../../src/topics/workflows.md:248 5ad0adb359db4652a4b7ebd98369190e
msgid ""
"The `steps` section describes the actual steps of the workflow.  In this "
"example, the first step extracts a file from a tar file, and the second "
"step compiles the file from the first step using the java compiler. "
"Workflow steps are not necessarily run in the order they are listed, "
"instead the order is determined by the dependencies between steps (using "
"`source`).  In addition, workflow steps which do not depend on one "
"another may run in parallel."
msgstr ""

#: ../../src/topics/workflows.md:256 753f0dc2fa3a45358dfc66e7a86fb65a
msgid ""
"The first step, `untar` runs `tar-param.cwl` (described previously in "
"[Parameter References](parameter-references.md)). This tool has two input"
" parameters, `tarfile` and `extractfile` and one output parameter "
"`extracted_file`."
msgstr ""

#: ../../src/topics/workflows.md:261 7eb328b2d93d4ee3b47ec26340bd3e98
msgid ""
"The ``in`` section of the workflow step connects these two input "
"parameters to the inputs of the workflow, `tarball` and "
"`name_of_file_to_extract` using `source`.  This means that when the "
"workflow step is executed, the values assigned to `tarball` and "
"`name_of_file_to_extract` will be used for the parameters `tarfile` and "
"`extractfile` in order to run the tool."
msgstr ""

#: ../../src/topics/workflows.md:267 9b2cdf146f3d4906931ec9be50a194e8
msgid ""
"The `out` section of the workflow step lists the output parameters that "
"are expected from the tool."
msgstr ""

#: ../../src/topics/workflows.md:278 b48d08c1caa241e68a758934f6d934f9
msgid ""
"The second step `compile` depends on the results from the first step by "
"connecting the input parameter `src` to the output parameter of `untar` "
"using `untar/extracted_file`.  It runs `arguments.cwl` (described "
"previously in [Additional Arguments and Parameters](additional-arguments-"
"and-parameters.md)). The output of this step `classfile` is connected to "
"the `outputs` section for the Workflow, described above."
msgstr ""

#: ../../src/topics/workflows.md:285 cac7f881e9984afcae77afd99b049334
msgid "Nested Workflows"
msgstr ""

#: ../../src/topics/workflows.md:287 2a60f236d6194b2daebed0fa094edc30
msgid ""
"Workflows are ways to combine multiple tools to perform a larger "
"operations. We can also think of a workflow as being a tool itself; a CWL"
" workflow can be used as a step in another CWL workflow, if the workflow "
"engine supports the `SubworkflowFeatureRequirement`:"
msgstr ""

#: ../../src/topics/workflows.md:297 6cc53ff3acef4bbc87a5124a4f473b52
msgid ""
"Here's an example workflow that uses our `1st-workflow.cwl` as a nested "
"workflow:"
msgstr ""

#: ../../src/topics/workflows.md:300 635696160b8d4b2b9607986a761a0fa0
msgid "`nestedworkflows.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:309 4511d99ea12f4389a18f9fd061e207ce
msgid ""
"This two-step workflow starts with the `create-tar` step which is "
"connected to the `compile` step in orange; `compile` is another workflow,"
" diagrammed on the right. In purple we see the fixed string "
"`\"Hello.java\"` being supplied as the `name_of_file_to_extract`."
msgstr ""

#: ../../src/topics/workflows.md:314 dbd710aa7bd049018af5a693a16f93c6
msgid ""
"<a href=\"https://view.commonwl.org/workflows/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/nestedworkflows.cwl\"><img"
" src=\"https://view.commonwl.org/graph/svg/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/nestedworkflows.cwl\""
" alt=\"Visualization of nestedworkflows.cwl\" /></a> <a "
"href=\"https://view.commonwl.org/workflows/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/1st-"
"workflow.cwl\"><img src=\"https://view.commonwl.org/graph/svg/github.com"
"/common-workflow-language/user_guide/blob/main/_includes/cwl/workflows"
"/1st-workflow.cwl\" alt=\"Visualization of 1st-workflow.cwl\" /></a>"
msgstr ""

#: ../../src/topics/workflows.md:322 f9f192f956eb47d7a4fa47c80f1b56c0
msgid ""
"A CWL `Workflow` can be used as a `step` just like a `CommandLineTool`, "
"its CWL file is included with `run`. The workflow inputs (`tarball` and "
"`name_of_file_to_extract`) and outputs (`compiled_class`) then can be "
"mapped to become the step's input/outputs."
msgstr ""

#: ../../src/topics/workflows.md:336 711bc01e2e5c47f293abe478f43c1b92
msgid ""
"Our `1st-workflow.cwl` was parameterized with workflow inputs, so when "
"running it we had to provide a job file to denote the tar file and "
"`*.java` filename. This is generally best-practice, as it means it can be"
" reused in multiple parent workflows, or even in multiple steps within "
"the same workflow."
msgstr ""

#: ../../src/topics/workflows.md:341 68509d8627a14073aabfe2071faf5214
msgid ""
"Here we use `default:` to hard-code `\"Hello.java\"` as the "
"`name_of_file_to_extract` input, however our workflow also requires a tar"
" file at `tarball`, which we will prepare in the `create-tar` step. At "
"this point it is probably a good idea to refactor `1st-workflow.cwl` to "
"have more specific input/output names, as those also appear in its usage "
"as a tool."
msgstr ""

#: ../../src/topics/workflows.md:347 0744ac6efec34b61a4a7c3d1060bdb42
msgid ""
"It is also possible to do a less generic approach and avoid external "
"dependencies in the job file. So in this workflow we can generate a hard-"
"coded `Hello.java` file using the previously mentioned "
"`InitialWorkDirRequirement` requirement, before adding it to a tar file."
msgstr ""

#: ../../src/topics/workflows.md:366 2f6f5592fb5d44eb8c9998d8d9e9b9f1
msgid ""
"In this case our step can assume `Hello.java` rather than be "
"parameterized, so we can use hardcoded values `hello.tar` and "
"`Hello.java` in a `baseCommand` and the resulting `outputs`:"
msgstr ""

#: ../../src/topics/workflows.md:383 af8995565822455388c9e32b59f7319b
msgid ""
"Did you notice that we didn't split out the `tar --create` tool to a "
"separate file, but rather embedded it within the CWL Workflow file? This "
"is generally not best practice, as the tool then can't be reused. The "
"reason for doing it in this case is because the command line is hard-"
"coded with filenames that only make sense within this workflow."
msgstr ""

#: ../../src/topics/workflows.md:389 a71808fbee3349079bb3a4fd4382662c
msgid ""
"In this example we had to prepare a tar file outside, but only because "
"our inner workflow was designed to take that as an input. A better "
"refactoring of the inner workflow would be to take a list of Java files "
"to compile, which would simplify its usage as a tool step in other "
"workflows."
msgstr ""

#: ../../src/topics/workflows.md:394 3684b45ee2b146c2a1470712375b8fb0
msgid ""
"Nested workflows can be a powerful feature to generate higher-level "
"functional and reusable workflow units - but just like for creating a CWL"
" Tool description, care must be taken to improve its usability in "
"multiple workflows."
msgstr ""

#: ../../src/topics/workflows.md:398 882cda0615624d7e94c1a8708c35733b
msgid "Scattering Steps"
msgstr ""

#: ../../src/topics/workflows.md:400 3f5af7cf008446f3ad18a7ea5e8aab5b
msgid ""
"Now that we know how to write workflows, we can start utilizing the "
"`ScatterFeatureRequirement`. This feature tells the runner that you wish "
"to run a tool or workflow multiple times over a list of inputs. The "
"workflow then takes the input(s) as an array and will run the specified "
"step(s) on each element of the array as if it were a single input. This "
"allows you to run the same workflow on multiple inputs without having to "
"generate many different commands or input yaml files."
msgstr ""

#: ../../src/topics/workflows.md:411 d927b215d2e3400c941e490f1a102c97
msgid ""
"The most common reason a new user might want to use scatter is to perform"
" the same analysis on different samples. Let's start with a simple "
"workflow that calls our first example (`hello_world.cwl`) and takes an "
"array of strings as input to the workflow:"
msgstr ""

#: ../../src/topics/workflows.md:415 52466df4530640d8bf65fa8f8dac87b1
msgid "`scatter-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:421 15488985c612469d80d9c20b00f1569b
msgid ""
"Aside from the `requirements` section including "
"`ScatterFeatureRequirement`, what is going on here?"
msgstr ""

#: ../../src/topics/workflows.md:429 ccc00c4b29134214ac79fc6815ba15e0
msgid ""
"First of all, notice that the main workflow level input here requires an "
"array of strings."
msgstr ""

#: ../../src/topics/workflows.md:441 93cf2c2587394b00828a7f944d201c84
msgid ""
"Here we've added a new field to the step `echo` called `scatter`. This "
"field tells the runner that we'd like to scatter over this input for this"
" particular step. Note that the input name listed after scatter is the "
"one of the step's input, not a workflow level input."
msgstr ""

#: ../../src/topics/workflows.md:445 5151bd4448314e7c9aac6d4841539613
msgid ""
"For our first scatter, it's as simple as that! Since our tool doesn't "
"collect any outputs, we still use `outputs: []` in our workflow, but if "
"you expect that the final output of your workflow will now have multiple "
"outputs to collect, be sure to update that to an array type as well!"
msgstr ""

#: ../../src/topics/workflows.md:450 9154dd4987ad44e3bcb227324179a854
msgid "Using the following input file:"
msgstr ""

#: ../../src/topics/workflows.md:452 636ad7e5c8ec4b8b9f9ea1e70f166695
msgid "`scatter-job.yml`"
msgstr ""

#: ../../src/topics/workflows.md:458 c3f371626c2f49da9092cd5aabc8e075
msgid ""
"As a reminder, [`hello_world.cwl`](../introduction/quick-start.md) simply"
" calls the command `echo` on a message. If we invoke `cwltool scatter-"
"workflow.cwl scatter-job.yml` on the command line:"
msgstr ""

#: ../../src/topics/workflows.md:466 5b186b36c71d42d19b8ef294384a0365
msgid ""
"You can see that the workflow calls echo multiple times on each element "
"of our `message_array`. Ok, so how about if we want to scatter over two "
"steps in a workflow?"
msgstr ""

#: ../../src/topics/workflows.md:469 67f8b32d49284698ad5248f7960cb95b
msgid ""
"Let's perform a simple echo like above, but capturing `stdout` by adding "
"the following lines instead of `outputs: []`"
msgstr ""

#: ../../src/topics/workflows.md:472 e49cbede4a4942e99b6f90e878898362
msgid "`hello_world_to_stdout.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:480 168b8b8983f84a49ab94c09be99753b4
msgid ""
"And add a second step that uses `wc` to count the characters in each "
"file. See the tool below:"
msgstr ""

#: ../../src/topics/workflows.md:483 9d2f8b5fc572494e8e1ff54be1ba146e
msgid "`wc-tool.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:489 0448518b8c514ec18fea6b32676528ce
msgid ""
"Now, how do we incorporate scatter? Remember the scatter field is under "
"each step:"
msgstr ""

#: ../../src/topics/workflows.md:491 315b8d60537c4e1b98136ffed099df1e
msgid "`scatter-two-steps.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:497 fc4d347151574b95907c3db531b3467d
msgid ""
"Here we have placed the scatter field under each step. This is fine for "
"this example since it runs quickly, but if you're running many samples "
"for a more complex workflow, you may wish to consider an alternative. "
"Here we are running scatter on each step independently, but since the "
"second step is not dependent on the first step completing all languages, "
"we aren't using the scatter functionality efficiently. The second step "
"expects an array as input from the first step, so it will wait until "
"everything in step one is finished before doing anything. Pretend that "
"`echo Hello World!` takes 1 minute to perform, `wc -c` on the output "
"takes 3 minutes and that `echo Hallo welt!` takes 5 minutes to perform, "
"and `wc` on that output takes 3 minutes. Even though `echo Hello World!` "
"could finish in 4 minutes, it will actually finish in 8 minutes because "
"the first step must wait on `echo Hallo welt!`. You can see how this "
"might not scale well."
msgstr ""

#: ../../src/topics/workflows.md:509 235259da671547188634a55a5616b32c
msgid ""
"Ok, so how do we scatter on steps that can proceed independent of other "
"samples? Remember from [Nested Workflows](#nested-workflows), that we can"
" make an entire workflow a single step in another workflow! Convert our "
"two-step workflow to a single step subworkflow:"
msgstr ""

#: ../../src/topics/workflows.md:513 8621d777883f41dead6ec6de0bb01094
msgid "`scatter-nested-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:519 87f8702d0b88446ca01018b08b42e5d7
msgid ""
"Now the scatter acts on a single step, but that step consists of two "
"steps so each step is performed in parallel."
msgstr ""

#: ../../src/topics/workflows.md:522 c5dacc8526fa4341a13ce9872c1fcba1
msgid "Conditional Workflows"
msgstr ""

#: ../../src/topics/workflows.md:524 9dfd2c7d475245d68052fc30d44b90d3
msgid ""
"This workflow contains a conditional step and is executed based on the "
"input. This allows workflows to skip additional steps based on input "
"parameters given at the start of the program or by previous steps."
msgstr ""

#: ../../src/topics/workflows.md:527 c48070836d1a4e53a9256f4e40716f3c
msgid "`conditional-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:566 88fc7b9654734d838aaf202083a6dcd1
msgid ""
"The first thing you'll notice is that this workflow is only compatible "
"for version 1.2 or greater of the CWL standards."
msgstr ""

#: ../../src/topics/workflows.md:573 2fc5956dbad1411f86aeefe5b8655b07
msgid ""
"The first step of the workflow (step1) contains two input properties and "
"will execute foo.cwl when the conditions are met. The new property `when`"
" is where the condition validation takes place. In this case only when "
"`in1`  from the workflow contains a value `< 1` this step will be "
"executed."
msgstr ""

#: ../../src/topics/workflows.md:587 e8a7a80a070148e4958af6b4d70250a1
msgid ""
"Using the following command `cwltool cond-wf-003.1.cwl --val 0` the value"
" will pass the first conditional step and will therefore be executed and "
"is shown in the log by `INFO [step step1] start` whereas the second step "
"is skipped as indicated by `INFO [step step2] will be skipped`."
msgstr ""

#: ../../src/topics/workflows.md:607 6c2980f728e44c82bfad95316f405be8
msgid ""
"When a value of 3 is given the first conditional step will not be "
"executed but the second step will `cwltool cond-wf-003.1.cwl --val 3`."
msgstr ""

#: ../../src/topics/workflows.md:627 8d0fbfb49a3a4aefa3ec7d71e782dbab
msgid ""
"If no conditions are met for example when using `--val 2` the workflow "
"will raise a permanentFail."
msgstr ""

#: ../../src/topics/yaml-guide.md:1 b847adf4f9b343518c45eec4b5fb881b
msgid "YAML Guide"
msgstr ""

#: ../../src/topics/yaml-guide.md:6 51d36eca415b4040ae7cd2dea438b829
msgid ""
"[YAML][yaml] is a file format designed to be readable by both computers "
"and humans. This guide introduces the features of YAML that are relevant "
"when writing CWL descriptions and input parameter files."
msgstr ""

#: ../../src/topics/yaml-guide.md:13 12816605aedd40e5babe852973366a9d
msgid "You can skip this section if you are already comfortable with YAML."
msgstr ""

#: ../../src/topics/yaml-guide.md:16 9a5c688b2c584362b78fe3041832ee6d
msgid "Contents"
msgstr ""

#: ../../src/topics/yaml-guide.md:18 b9c062f153ae40f8ae59164f6096a0fa
msgid "[Key-Value Pairs](#key-value-pairs)"
msgstr ""

#: ../../src/topics/yaml-guide.md:19 2bd3b6f3998a461f9b4f5babe423242e
msgid "[Comments](#comments)"
msgstr ""

#: ../../src/topics/yaml-guide.md:20 6a7a52d67e954928b57731d64f9962d5
msgid "[Maps](#maps)"
msgstr ""

#: ../../src/topics/yaml-guide.md:21 c0fe4464296e448d89fba9adae04ab71
msgid "[Arrays](#arrays)"
msgstr ""

#: ../../src/topics/yaml-guide.md:22 c5f7a9a163884b18a7dfd3cccbf6bfae
msgid "[JSON Style](#json-style)"
msgstr ""

#: ../../src/topics/yaml-guide.md:24 5ebef4a028ef4f0dabd3caae4a0b0bfe
msgid "Key-Value Pairs"
msgstr ""

#: ../../src/topics/yaml-guide.md:26 08f3b7b52d0d48499445fd30cd71640c
msgid ""
"Fundamentally, a file written in YAML consists of a set of _key-value "
"pairs_. Each pair is written as `key: value`, where whitespace after the "
"`:` is required. Key names in CWL files should not contain whitespace - "
"[_camelCase_][camelCase] is used for multi-word key names that have "
"special meaning in the CWL specification and underscored key names "
"otherwise. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:42 888ae81b155f41a6860428e200948950
msgid ""
"The YAML above defines four keys - `first_name`, `last_name`, "
"`age_years`, and `home` - with their four respective values. Values can "
"be character strings, numeric (integer, floating point, or scientific "
"representation), Boolean (`true` or `false`), or more complex nested "
"types (see below)."
msgstr ""

#: ../../src/topics/yaml-guide.md:51 4aa3831e2b9f4fb5b4161c198b9f6419
msgid ""
"Values may be wrapped in quotation marks, but be aware that this may "
"change the way that they are interpreted i.e. `\"1234\"` will be treated "
"as a character string , while `1234` will be treated as an integer. This "
"distinction can be important, for example when describing parameters to a"
" command: in CWL all parts of `baseCommand` must be strings so, if you "
"want to specify a fixed numeric value to a command, make sure that you "
"wrap that numeric value in quotes: `baseCommand: [echo, \"42\"]`."
msgstr ""

#: ../../src/topics/yaml-guide.md:61 952c18ae0fb24c3ab42ae3f7b7db0844
msgid "Comments"
msgstr ""

#: ../../src/topics/yaml-guide.md:63 bd5835e2b35349679b1e69a50b958ee6
msgid ""
"You may use `#` to add comments to your CWL and parameter files. Any "
"characters to the right of ` #` will be ignored by the program "
"interpreting the YAML. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:76 2d36d90d86c3484c9f767e3fcdb29b25
msgid ""
"If there is anything on the line before the comment, be sure to add at "
"least one space before the `#`!"
msgstr ""

#: ../../src/topics/yaml-guide.md:79 48ca1f4243e343c2a3da3c9b5596097d
msgid "Maps"
msgstr ""

#: ../../src/topics/yaml-guide.md:81 5d15caab19694c58a78d566b2897f6cc
msgid ""
"When describing a tool or workflow with CWL, it is usually necessary to "
"construct more complex, nested representations. Referred to as _maps_, "
"these hierarchical structures are described in YAML by providing "
"additional key-value pairs as the value of any key. These pairs "
"(sometimes referred to as \"children\") are written on new lines under "
"the key to which they belong (the \"parent\"), and should be indented "
"with two spaces (⇥tab characters are not allowed). For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:104 42cb06c103784fb087a44e55f570cc79
msgid ""
"The YAML above illustrates how to build up complex nested object "
"descriptions relatively quickly. The `inputs` map contains a single key, "
"`example_flag`, which itself contains two keys, `type` and "
"`inputBinding`, while one of these children, `inputBinding`, contains a "
"further two key-value pairs (`position` and `prefix`). See the "
"[Arrays](#arrays) section below for more information about providing "
"multiple values/key-value pairs for a single key. For comparison with the"
" example YAML above, here is a graphical representation of the `inputs` "
"object it describes."
msgstr ""

#: ../../src/topics/yaml-guide.md:127 90b1474dba5442a48f9fdd07b07ed9fd
msgid "Arrays"
msgstr ""

#: ../../src/topics/yaml-guide.md:129 76a1a131ac7648f9aa14ce14b09d17fe
msgid ""
"In certain circumstances, it is necessary to provide multiple values or "
"objects for a single key. As we've already seen in the [Maps](#maps) "
"section above, more than one key-value pair can be mapped to a single "
"key. However, it is also possible to define multiple values for a key "
"without having to provide a unique key for each value. We can achieve "
"this with an _array_, where each value is defined on its own line and "
"preceded by `-`. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:146 f04cae70233848f7bd051fd553a89b9b
msgid "and a more complex example combining maps and arrays:"
msgstr ""

#: ../../src/topics/yaml-guide.md:167 b6b1ad435b13428cb56c22fc135b303f
msgid "JSON Style"
msgstr ""

#: ../../src/topics/yaml-guide.md:169 4a45ba50729c42ec949780bbcf495ef7
msgid ""
"YAML is based on [JavaScript Object Notation (JSON)][json]. Maps and "
"arrays can also be defined in YAML using the native JSON syntax. For "
"example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:177 57fa577b531645ae890c634c6549d680
msgid "and:"
msgstr ""

#: ../../src/topics/yaml-guide.md:184 0cef0765d01e4525878389bb5ae8f6c5
msgid ""
"Native JSON can be useful in indicating where a field is intentionally "
"left empty (such as `[]` for an empty array), as well as where it makes "
"more sense for the values to be located on the same line (For example, "
"when providing option flags and their values in a shell command). "
"However, as the second example above shows, it can severely affect the "
"readability of a YAML file, and should be used sparingly."
msgstr ""

#: ../../src/topics/yaml-guide.md:194 1730e578bf2f4a7b8836d0a41e059de8
msgid "Reference"
msgstr ""

#: ../../src/topics/yaml-guide.md:196 f5e7fb0d74924c9e9b4ca1434f724ff0
msgid ""
"The [Learn YAML in Y Minutes][yaml-y-mins] reference was very helpful for"
" us while we wrote this guide, though it also covers features that are "
"not valid in CWL."
msgstr ""

